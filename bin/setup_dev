#!/bin/bash -e
#
# Setup things for directly running the core system. Not required for just
# running a downloaded container.
#
# If you just want to get up and go, see bin/setup_base.
#

ROOT=$(dirname $0)/..
cd $ROOT

SIMPLE=
if [ "$1" == simple ]; then
    SIMPLE=y
    shift
fi

PVERSION=3.8

MININET=https://github.com/mininet/mininet
MININETV=$(cat etc/MININET_VERSION)

if [ -f .daq.local ]; then
    echo Loading config from .daq.local
    source .daq.local
fi

if [ -z "$AG" ]; then
    AG="sudo apt-get -qqy --no-install-recommends"
fi

if [ -z "$PIP" ]; then
    PIP="python$PVERSION -m pip"
fi

echo AG is $AG
echo PIP is $PIP
echo Setup root is $PWD

if [ "$DAQ_BUILD" == "no" ]; then
    echo Skipping core setup because DAQ_BUILD=no
    exit 0
fi

echo $AG update
$AG update

echo $AG install
$AG install lsb-release
release=$(lsb_release -cs)
echo LSB release version $release

$AG install \
    software-properties-common apt-transport-https iproute2 \
    git ethtool curl apache2-utils iputils-ping lsof jq pandoc \
    ca-certificates sudo net-tools tcpdump build-essential pango-1.0 \
    isc-dhcp-client network-manager netcat gnupg2 strace libffi-dev \
    python$PVERSION python3-pkg-resources python3-setuptools \
    python$PVERSION-dev python3-pip python emacs-nox python$PVERSION-venv nmap

if [ -d mininet ]; then
    echo Checking mininet version matches $MININETV...
    targetrev=$(cd mininet; git rev-parse $MININETV)
    instrev=$(cd mininet; git rev-parse HEAD)
    if [ "$targetrev" != "$instrev" ]; then
        echo Target mininet version $MININETV does not match installed version.
        false
    fi
    if [ ! -f mininet/.the_house_that_daq_built ]; then
        echo Mininet build seems to be incomplete. Try bin/clean_dev and try again.
        false
    fi
else
    echo Cloning $MININET $MININETV...
    git clone $MININET
    (
        cd mininet
        git reset --hard $MININETV
        for i in ssh pep8 pyflakes python-pexpect pylint xterm ; do
            perl -pi -e "s/${i}//g" util/install.sh ;
        done
        sed -i s/cgroup-bin/cgroup-tools/ util/install.sh
        util/install.sh -n
    )
    touch mininet/.the_house_that_daq_built
fi

# Can't use venv inside of containers because of absolute paths.
if [ -n "$CI" ]; then
    echo Skipping venv activation.
    mkdir -p venv/bin
    touch venv/bin/activate
else
    # Fix permissions in case they have wandered...
    test -f venv && sudo chown `stat . -c %u:%g` -R venv/
    python$PVERSION -m venv venv
    source venv/bin/activate
fi

which python
python --version
which python3
python3 --version

echo Updating pip...
$PIP install --upgrade pip
$PIP -V

echo Installing python dependencies...
$PIP install wheel
$PIP install --upgrade --index-url=https://pypi.python.org/simple setuptools
$PIP install --upgrade --index-url=https://pypi.python.org/simple Jinja2 \
    pylint==2.4.2 cryptography requests netifaces codecov coverage \
    pyyaml cairocffi==1.0.2 WeasyPrint==50 pypandoc==1.4 \
    firebase-admin==2.16.0 \
    google-api-core==1.16.0 \
    google-cloud-core==1.3.0 \
    google-cloud-firestore==1.6.0 \
    google-cloud-logging==1.14.0 \
    google-cloud-pubsub==0.40.0 \
    google-cloud-storage==1.16.1 \
    grpcio-tools==1.30.0

$PIP freeze
echo Resetting .cache directory permissions...
test -n "$USER" && sudo chown $USER -R $HOME/.cache

if [ -n "$SIMPLE" ]; then
    echo Finished with simple setup.
    exit 0
fi

bin/setup_remote faucet
bin/setup_remote forch
bin/setup_remote udmi

echo -n "DAQ commit "
git log -n 1 --pretty=format:"%h - %an, %ar : %s" || true
echo

docker --version

if ! docker images > /dev/null; then
    echo
    echo Docker execution failed, is the docker group setup?
    echo If this is the first time, try logging out and log back in again.
    false
fi

rm -rf protoc-gen-doc
git clone https://github.com/pseudomuto/protoc-gen-doc.git

echo
echo Setup completed successfully.
