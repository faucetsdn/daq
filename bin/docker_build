#!/bin/bash -e

# Set this so docker build will fail even though piped through tee.
set -o pipefail

ROOT=$(dirname $0)/..
cd $ROOT
source bin/config_base.sh

build_root=build
sudo rm -rf $build_root .build_hash .build_files
mkdir -p $build_root
force=
build=

if [ "$1" == "force" ]; then
    force=y
    shift
fi

if [ "$1" == "inline" ]; then
    inline=y
    shift
fi

if [ "$1" == build ]; then
    build=y
    shift
fi

path=
if [ "$1" == "tar" ]; then
    shift
    path=$1
    shift
fi


if [ -n "$DAQ_TARGETS" ]; then
    declare -A test_set
    for target in $(echo $DAQ_TARGETS | sed 's/,/ /g'); do
        echo Enabling target $target
        test_set[$target]=y
    done
fi

docker_files=$(host_tests=$host_tests bin/docker_build_files)

build_target() {
    if [ -n "$inline" ]; then
        bin/retry_cmd docker build -t $tag -f $file . 2>&1 | tee -a $logfile || failed=y
    else
        bin/retry_cmd docker build -t $tag -f $file . >> $logfile 2>&1 || failed=y
    fi
    if [ -n "$failed" ]; then
        tail $logfile
        echo Build failed, see $logfile for complete log.
        false
    elif [ -n "$path" ]; then
        echo Saving Docker image $tag to $path
        mkdir -p $path
        docker save "$tag" > $path/$module.tar
    fi
    hash=$(docker images $tag:latest | awk '{print $3}' | head -2 | tail -1)
    docker tag $tag:latest $tag:$hash
    echo Build complete. >> $logfile
}

for file in $docker_files; do
    if [ ${file%\~} != ${file} ]; then
        continue
    fi
    module=${file#*/Dockerfile.}
    logfile=$build_root/docker_build.$module
    failed=
    tag=daqf/$module
    found=$(docker images $tag 2>/dev/null | grep $module) || true
    if [ -n "$DAQ_TARGETS" -a -z "${test_set[$module]}" ]; then
        #echo Skipping non-enabled $tag
        true
    elif [ -z "$DAQ_TARGETS" -o -n "$build" ] && [ -z "$force" -a -n "$found" ]; then
        unset test_set[$module]
        echo Skipping building existing $tag 
    else
        unset test_set[$module]
        echo Build $file into $tag, log to $logfile...
        echo docker build -t $tag -f $file . > $logfile
        echo build_target $file
        build_target &
    fi
done
wait

if [ -n "$DAQ_TARGETS" ]; then
    for module in "${!test_set[@]}"; do
        echo Could not find specified test module to build: $module
        false
    done
fi
