/*
 * Specification for DAQ configuration.
 */

syntax = "proto3";
import "daq/proto/session_server.proto";

/*
 * DAQ configuration.
 */
message DaqConfig {
  // Description for dashboard.
  string site_description = 1;

  // Default time to monitor before starting tests.
  int32 monitor_scan_sec = 2;

  // default timeout for tests, or 0 to disable.
  int32 default_timeout_sec = 3;

  // time to let the network settle.
  int32 settle_sec = 38;

  // Default base module configuration file.
  string base_conf = 4;

  // Directory of site-configuration data, including devices.
  string site_path = 5;

  // initial dhcp lease time on test run start (needs trailing s for sec)
  string initial_dhcp_lease_time = 6;

  // dhcp lease time after initial startup (needs trailing s for sec)
  string dhcp_lease_time = 7;

  // dhcp response time for normal testing cycle
  int32 dhcp_response_sec = 39;

  // dhcp response time for testing long test cycle
  int32 long_dhcp_response_sec = 8;

  // Access switch setup information
  SwitchSetup switch_setup = 9;

  // Specify explicit host test configuration.
  string host_tests = 16;

  // Specify if system should build tests on run.
  bool build_tests = 36;

  // Limit the number of test runs before exit.
  int32 run_limit = 17;

  // Stop after there are any errors.
  bool fail_mode = 18;

  // Only run test modules once per device.
  bool single_shot = 34;

  // Keep results around and don't kill containers on error.
  bool result_linger = 19;

  // Don't run tests on devices, just activate them on the network.
  bool no_test = 20;

  // Keep the hold container around after tests are done for debugging.
  bool keep_hold = 40;

  // Extra debugging arguments. Can be one of { error, warn, info, debug }
  string daq_loglevel = 21;

  // Mininet debugging arguments. Can be one of { error, warn, info, debug }
  string mininet_loglevel = 22;

  // Hook for executing debug commands when a module finishes.
  string finish_hook = 35;

  // Service account credential for access to a cloud project.
  string gcp_cred = 23;

  // Topic used for live stream validation.
  string gcp_topic = 24;

  // Validation schema default.
  string schema_path = 25;

  // Location of mud files to use for this setup.
  string mud_files = 26;

  // File to use for runtime device behavior specification.
  string device_specs = 27;

  // Configuration directory for runtime tests.
  string test_config = 28;

  // Set port-debounce for flaky connections. Zero to disable.
  int32 port_debounce_sec = 29;

  // Hook for device topology updates.
  string topology_hook = 30;

  // Directory of defaults for new devices.
  string device_template = 31;

  // If defined, override destination root for device reports (defaules to {site_path})
  string site_reports = 32;

  // Cloud data retention policy.
  float run_data_retention_days = 33;

  // Direct connect interfaces.
  map<string, Interface> interfaces = 37;

  // Failure testing triggers
  map<string, string> fail_module = 47;

  // Set time between port disconnect and host tests shutdown
  int32 port_flap_timeout_sec = 48;

  // USI url
  UsiSetup usi_setup = 49;

  // Configures events that trigger a DAQ run
  RunTrigger run_trigger = 50;

  // verbose output
  bool debug_mode = 51;

  // Drop into console mode after test
  bool use_console = 52;

  // Reporting device result
  DeviceReporting device_reporting = 53;

  // For specifying ip subnets assigned by external DHCP server / static ips
  repeated SubnetSpec external_subnets = 54;

  // IP subnet used by test hosts
  SubnetSpec internal_subnet = 55;

  // Path to include file
  string include = 56;

  // Configuration for cloud uplink
  CloudConfig cloud_config = 57;
}

enum DhcpMode {
  NORMAL = 0;
  STATIC_IP = 1;
  EXTERNAL = 2;
  LONG_RESPONSE = 3;
  IP_CHANGE = 4;
}

/**
 * For specifying internal / external subnets information
**/
message SubnetSpec {
  string subnet = 1;
}

/**
 * USI paramters
**/
message UsiSetup {
  string url = 1;
  int32 rpc_timeout_sec = 2;
}

/*
 * System configuraiton of the access switch. This is used by the system
 * to setup and configure the switch itself.
 */
message SwitchSetup {
  // Interface name for switch control plane
  string ctrl_intf = 9;

  // IP address of external switch.
  string ip_addr = 11;

  // Dataplane uplink port
  int32 uplink_port = 13;

  // Local port of DAQ OpenFlow controller
  int32 lo_port = 14;

  // Local port of second DAQ OpenFlow controller
  int32 lo_port_2 = 15;

  // Port for varz server
  int32 varz_port = 30;

  // Port for second varz server
  int32 varz_port_2 = 31;

  // Port for an alternate stack setup (not controlled by daq).
  int32 alt_of_port = 16;

  // Port for alternate setup varz server.
  int32 alt_varz_port = 17;

  // Run network controller native, not in container.
  bool native = 18;

  // IP address and subnet for local control plane interface
  string lo_addr = 19;

  // IP address template and subnet for module ip addresses
  string mods_addr = 20;

  // Dataplane id of external OpenFlow switch
  string of_dpid = 41;

  // Interface name for external switch data plane
  string data_intf = 42;

  // MAC address for data interface used to proxy data
  string data_mac = 48;

  // Name for external OVS bridge in lieu of physical switch
  string ext_br = 43;

  // Switch model
  string model = 44;

  // Switch connect username
  string username = 45;

  // Switch connect password
  string password = 46;

  // VXLAN configuration information
  TunnelEndpoint endpoint = 47;
}

/*
 * Information for test triggering.
 */
message RunTrigger {
  // start of vlan range
  int32 vlan_start = 1;

  // end of vlan range
  int32 vlan_end = 2;

  // egress vlan
  int32 egress_vlan = 3;

  // native tap vlan
  int32 native_vlan = 4;

  // limit on the number of active testing hosts
  int32 max_hosts = 5;

  // blockout time for tested hosts in seconds
  int32 device_block_sec = 6;

  // retain existing local results from run to run
  bool retain_results = 7;

  // arp-scan interval for native gateways in seconds
  int32 arp_scan_sec = 8;

  // number of arp-scans to perform when DHCP fails
  int32 arp_scan_count = 9;
}

/*
 * Information for faux containers.
 */
message Interface {
  // Faux startup command line options.
  string opts = 1;

  // Switch port for attching interface.
  int32 port = 2;
}

/*
 * Configuration for device result reporting.
 */
message DeviceReporting {
  // Server port
  int32 server_port = 1;
}

/*
 * Configuration for cloud result reporting.
 */
message CloudConfig {
  // Cloud project id.
  string project_id = 1;

  // Cloud project region.
  string cloud_region = 2;

  // Cloud registry id.
  string registry_id = 3;

  // Cloud reporting device id.
  string device_id = 4;

  // File for private key.
  string private_key_file = 5;

  // Key algorithm type.
  string algorithm = 6;

  // CA certs file.
  string ca_certs = 7;

  // Bridge hostname.
  string mqtt_bridge_hostname = 8;

  // Bridge port.
  int32 mqtt_bridge_port = 9;
}

/*
 * Configuration for device coupler
 */
message DeviceCouplerConfig {
  // Name of trunk interface that connects to access switch
  string trunk_iface = 1;

  // Name of OVS bridge where device MACs from access s/w are learnt
  string bridge = 2;

  // gRPC target IP for DAQ interface
  string daq_grpc_ip = 3;

  // gRPC target port for DAQ interface
  int32 daq_grpc_port = 4;

  // Source endpoint IP
  string source_ip = 5;

  // Device IP range
  repeated int32 test_vlans = 6;

}
