#!/bin/bash -e
# The following are expected modes of builds
# cmd/build <- defaults to build-all
# cmd/build check <- Check if the built images are updated.
# cmd/build push <- Pushes images to docker hub
# cmd/build pull <- Pulls images from docker hub
# cmd/build build <- Builds missing docker images
# cmd/build build-all <- Builds all docker images 

# Set this so docker build will fail even though piped through tee.
set -o pipefail

ROOT=$(dirname $0)/..

inline=
DOCKER_IMAGE_LIST=docker_images.txt

cd $ROOT
source misc/config_base.sh
host_tests=$host_tests bin/docker_build_files
function pull_images {
    declare -A test_set
    for target in $(host_tests=$host_tests bin/docker_build_files); do
        target=$(echo $target | sed 's|^.*/Dockerfile.||' | echo daqf/$(</dev/stdin))
        test_set[$target]=y
    done
    cat misc/$DOCKER_IMAGE_LIST | while read image hash other; do
        if [ -z "${test_set[$image]}" ]; then
            echo Skipping $image pull 
            continue
        fi 
        echo Pulling $image:$hash from dockerhub...
        (docker pull $image:$hash && docker tag $image:$hash $image:latest) || echo "Could not pull $image:$hash."
    done 
}

if [ "$1" == push ]; then
    cp inst/$DOCKER_IMAGE_LIST misc/$DOCKER_IMAGE_LIST
    cat misc/$DOCKER_IMAGE_LIST | while read image hash other; do
        found=$(docker images $image | awk '{print $3}' | grep $hash) || echo ""
        if [ -z "$found" ]; then
            echo $image:$hash not found locally...
            continue
        fi
        echo Push $image:$hash to dockerhub...
        ./bin/docker_push $image $hash 
    done 
    echo Done with docker build push.
    exit 0
elif [ "$1" == pull ]; then
    pull_images
    echo Updating .build_hash
    bin/build_hash write
    mv -f .build_files .build_built
    echo Done with docker build pull.
    exit 0
elif [ "$1" == check ]; then
    shift
    bin/build_hash check
    exit 0
elif [ "$1" == build-all ]; then
    build_all=build-all
    shift
fi

if [ "$1" == inline ]; then
    inline="inline"
    shift
fi


local_version=$(cd faucet; git rev-list -n 1 HEAD)
if [ "$1" == -f ]; then
    echo Forcing misc/FAUCET_VERSION to $local_version
    echo $local_version > misc/FAUCET_VERSION
    shift
fi

target_version=$(cat misc/FAUCET_VERSION)
target_commit=$(cd faucet; git rev-parse $target_version)
if [ "$target_commit" != "$local_version" ]; then
    echo Local faucet commit is at: $local_version
    echo Mismatch with misc/FAUCET_VERSION: $target_version
    echo Try 'bin/clean_dev && bin/setup_dev' to reset.
    false
fi

bin/docker_build $build_all $inline

rm inst/$DOCKER_IMAGE_LIST || true
echo Updating inst/$DOCKER_IMAGE_LIST...
docker images | sort | fgrep daqf/ | fgrep latest | while read image tag hash other; do
    echo $image $hash >> inst/$DOCKER_IMAGE_LIST
done
echo Push images to update misc/$DOCKER_IMAGE_LIST

echo Updating .build_hash
bin/build_hash write
mv -f .build_files .build_built
