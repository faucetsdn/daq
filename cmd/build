#!/bin/bash -e

# Set this so docker build will fail even though piped through tee.
set -o pipefail

ROOT=$(dirname $0)/..

local_config=local/system.conf
build_root=build
in_container=$DAQ_CONTAINER
build_args=
do_images=
ext_msg=
inline=
copydirs="bin cmd misc faucet mininet docker daq"
load_mark=/root/load_complete

cd $ROOT
source misc/config_base.sh

if [ "$1" == skip ]; then
    do_images=skip
elif [ "$1" == save ]; then
    do_images=save
    ext_msg=/save
    shift
elif [ "$1" == load ]; then
    do_images=load
    shift
    if [ -f $load_mark ]; then
        echo Images already loaded, blocking indefinitely.
        tail -f /dev/null
    fi
fi

if [ "$1" == inline ]; then
    inline=y
    shift
fi

target_version=$(cat misc/FAUCET_VERSION)
local_version=$(cd faucet; git rev-list -n 1 HEAD)

if [ "$target_version" != "$local_version" ]; then
    echo Local faucet commit is at: $local_version
    echo Mismatch with misc/FAUCET_VERSION: $target_version
    echo Try 'bin/clean_dev && bin/setup_dev' to reset.
    echo Or, manually update one version or the other as needed.
    false
fi

if [ -n "$in_container" ]; then
    # Run in container for pylint versioning.
    echo Running style checks...
    bin/check_style

    echo 'DOCKER_OPTS="-s vfs -D -l debug"' > /etc/default/docker
    service docker start
    sleep 3
    echo Importing current local version of daq...
    ROOT=/root/daq
    rm -rf $ROOT
    mkdir -p $ROOT
    cd /daq
    for subdir in $copydirs; do
        echo Copying subdir $subdir...
        cp -a $subdir $ROOT/
    done
    cd $ROOT
    if [ "$do_images" != load ]; then
        rm -rf build
    fi
    echo Now running in `pwd`
fi

sudo rm -rf $build_root
mkdir -p $build_root
sudo date > $build_root/last_build.txt

build_list_file=$build_root/build_list.txt
echo > $build_list_file
(
    shopt -s nullglob

    function include {
        target=$1
        source $1
    }

    function build {
        if [ -d $1 ]; then
            echo Including build files from $1
            echo $1/Dockerfile.* >> $build_list_file
        else
            echo Missing build directory $1
            false
        fi
    }

    function add {
        true
    }
    function remove {
        true
    }

    include ${host_tests:-misc/host_tests.conf}
)
docker_files=$(<$build_list_file)

for file in $docker_files; do
    if [ ${file%\~} != ${file} ]; then
        continue
    fi
    module=${file#*/Dockerfile.}
    if [ "$module" == base -a -n "$in_container" ]; then
        echo Skipping base build in container.
        continue
    fi
    logfile=$build_root/docker_build.$module
    failed=
    tag=daq/$module
    if [ "$do_images" == skip ]; then
        echo Skipping in-container build of daq/$module.
    elif [ "$do_images" == load ]; then
        docker load -i /daq/$build_root/docker_image.$module
    else
        echo Build$ext_msg $file into daq/$module, log to $logfile...
        echo docker build -t $tag $build_args -f $file . > $logfile
        if [ -n "$inline" ]; then
            docker build -t $tag $build_args -f $file . 2>&1 | tee -a $logfile || failed=y
        else
            docker build -t $tag $build_args -f $file . >> $logfile 2>&1 || failed=y
        fi
        if [ -n "$failed" ]; then
            tail $logfile
            echo Build failed, see $logfile for complete log.
            false
        fi
        echo Build complete. >> $logfile
        if [ "$do_images" == save ]; then
            docker save $tag > $build_root/docker_image.$module
        fi
    fi
done

if [ -n "$in_container" ]; then
    service docker stop
    sleep 2
    rm -fr /var/lib/docker/runtimes
    rm -fr faucet/.git
fi

if [ "$do_images" == load ]; then
    touch $load_mark
fi
