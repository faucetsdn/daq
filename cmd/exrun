#!/bin/bash -e

set -o pipefail

ROOT=$(realpath $(dirname $0)/..)
INSTDIR=$ROOT/inst
INSTLOCK=$INSTDIR/startup.lock
LOCALDIR=$ROOT/local
FAUCET_LOG=$INSTDIR/faucet.log
FAUCET_SOCK=faucet_event.sock
export FAUCET_EVENT_SOCK=$INSTDIR/$FAUCET_SOCK
TAGGED_VERSION=`cat etc/docker_images.ver`
skip_autostart=
cleanup_file=inst/exrun_cleanup.sh
uri_url_override=""
run_args="$@"

if [ `whoami` != root ]; then
    echo Running as root...
    sudo $0 "$@" && exit 0
    false
fi

if ! git show $TAGGED_VERSION > /dev/null; then
    echo
    echo Tagged version $TAGGED_VERSION not found.
    echo Maybe you need to fetch tags: git fetch --tags
    echo
    false
fi

cd $ROOT
source etc/config_base.sh

while [ -f $INSTLOCK ]; do
    echo Waiting for $INSTLOCK to disappear!
    sleep 10
done

FAUCET=$(realpath $ROOT/faucet)
FORCH=$(realpath $ROOT/forch)
MININET=$(realpath $ROOT/mininet)
LIBS=$(realpath $ROOT/libs)
PROTO=$(realpath $ROOT/libs/proto)

if [ ! -d $FAUCET ]; then
    echo Faucet directory $FAUCET not found, try running bin/setup_dev.
    false
fi

if [ ! -d $FORCH ]; then
    echo Forch directory $FORCH not found, try running bin/setup_dev.
    false
fi

(cd $FAUCET; git checkout $(< $ROOT/etc/FAUCET_VERSION)) || \
    echo Could not update faucet, try 'bin/clean_dev && bin/setup_dev' to reset.
(cd $FORCH; git checkout $(< $ROOT/etc/FORCH_VERSION)) || \
    echo Could not update forch, try 'bin/clean_dev && bin/setup_dev' to reset.

echo Release version $DAQ_VERSION

if [ "$1" == "-h" ]; then
    skip_autostart=y
fi

export PYTHONPATH=$FORCH:$FAUCET:$MININET:$LIBS:$PROTO

mkdir -p $INSTDIR
rm -f $cleanup_file
if [ "$switch_setup_model" != EXT_STACK ]; then
    rm -rf $INSTDIR/faucet*
fi

docker ps > /dev/null 2>&1 || service docker start

bridges=`ovs-vsctl list-br`
for bridge in $bridges; do
    echo Cleaning bridge $bridge...
    # bug in ovs
    timeout 10 ovs-vsctl --if-exists del-br $bridge || true
    ovs-vsctl --if-exists del-br $bridge
done
ovsctl=/usr/share/openvswitch/scripts/ovs-ctl
$ovsctl status || sudo $ovsctl start

sudo rm -f $cleanup_file

if [ -z `which tcpdump` ]; then
    export PATH=/usr/sbin:$PATH
fi

# Hacky workaround for apparmor protection of tcpdump. Without this, the process can not be killed.
cp `which tcpdump` binhack/

function autostart {
    tmp=`mktemp`
    echo DAQ autostart $@
    eval $@ | tee $tmp
    grep -e '^\s*DAQ autoclean\s' $tmp >> $cleanup_file || true
}

function DAQ {
    shift # autoclean
    echo Cleanup $@
    $@ || true
}

if [ -n "$switch_setup_ext_br" ]; then
    autostart bin/external_ovs
fi

if [ -n "$switch_setup_alt_port" ]; then
    autostart bin/alt_faucet
fi

if [ -n "$switch_setup_model" -a "$switch_setup_model" != EXT_STACK ]; then
    autostart bin/physical_sec
else
    echo No external switch model specified.
fi

# USI related setup
docker rm -f daq-usi || true
docker0_ip=`sudo ifconfig docker0 | grep 'inet ' | awk '{print $2}'`
if [ -z "$usi_setup_url" -o "$usi_setup_url" == "localhost:5000" -o "$usi_setup_url" == "$docker0_ip:5000" ]; then
    sudo iptables -C INPUT -i docker0 -j ACCEPT || sudo iptables -A INPUT -i docker0 -j ACCEPT
    autostart gcp_cred=$gcp_cred cmd/usi
    docker0_ip=`sudo ifconfig docker0 | grep 'inet ' | awk '{print $2}'`
    uri_url_override="usi_setup.url=$docker0_ip:5000"
fi

# Kill any gateways so that they don't prematurely assign an IP address.
gwids=$(docker ps --format '{{ .Image }} {{ .Names }}' | fgrep daqf/networking | awk '{print $2}') || true
for gwid in $gwids; do
    docker kill $gwid
done

export DAQ_SUPPRESS_PHY_SETUP=y

if [ -z "$skip_autostart" ]; then
    if [ -n "$startup_cmds" ]; then
        echo Sourcing $startup_cmds...
        source $startup_cmds
    else
        cmd/auto $run_args
    fi
fi

exit_code=0
cmd/start $conf_file $@ $uri_url_override || exit_code=$?

if [ -f "$cleanup_file" ]; then
    source $cleanup_file
fi

echo Done with run, exit $exit_code

exit $exit_code
