#!/bin/bash -e

ROOT=$(realpath $(dirname $0)/..)
MISCDIR=$ROOT/misc
INSTDIR=$ROOT/inst
INSTLOCK=$INSTDIR/startup.lock
LOCALDIR=$ROOT/local
FAUCET_CONF=faucet.yaml
FAUCET_LOG=$INSTDIR/faucet.log
FAUCET_SOCK=faucet_event.sock
export FAUCET_EVENT_SOCK=$INSTDIR/$FAUCET_SOCK
SYSTEM_CONF=system.conf
LOCAL_CONFIG=$LOCALDIR/$SYSTEM_CONF
export DAQ_VERSION=$(cat $MISCDIR/RELEASE_VERSION)
cleanup="echo cleanup"
skip_autostart=

if [ `whoami` != root ]; then
    echo Running as root...
    sudo $0 "$@" && exit 0
    false
fi

cd $ROOT
source misc/config_base.sh

while [ -f $INSTLOCK ]; do
    echo Waiting for $INSTLOCK to dissapear!
    sleep 10
done

FAUCET=$(realpath $ROOT/faucet)
MININET=$(realpath $ROOT/mininet)

echo Release version $DAQ_VERSION

if [ "$1" == "-h" ]; then
    skip_autostart=y
fi

export PYTHONPATH=$FAUCET:$MININET

# Dump configuration settings for debugging.
set | egrep ^[a-z][a-z_]*=

if [ ! -d $FAUCET ]; then
    echo Faucet directory $FAUCET not found.
    false
fi

if [ -n "$device_specs" ]; then
    echo Creating MUD templates for $device_specs...
    bin/mudacl $device_specs
fi

mkdir -p $INSTDIR
rm -f $FAUCET_EVENT_SOCK $FAUCET_LOG

docker ps > /dev/null 2>&1 || service docker start
sleep 1

ovsctl=/usr/share/openvswitch/scripts/ovs-ctl
$ovsctl status || sudo $ovsctl start

if [ -n "$daq_intf" ]; then
    echo daq_intf is deprecated, please use a local/faucet.yaml
    false
fi

cleanup_file=`mktemp`

function external {
    echo -n
}

function autostart {
    tmp=`mktemp`
    echo DAQ autostart $@
    eval $@ | tee $tmp
    grep -e '^\s*DAQ autoclean\s' $tmp >> $cleanup_file
}

function DAQ {
    shift # autoclean
    echo Cleanup $@
    $@
}

if [ -z "$skip_autostart" -a -n "$startup_cmds" ]; then
    echo Sourcing $startup_cmds...
    source $startup_cmds
fi

if [ -f .pdbrc ]; then
    echo Found .pdbrc file, using pdb...
    runcmd="python3 -u -m pdb"
elif [ -n "$DAQ_CODECOV" ]; then
    echo Running with coverage analysis...
    runcmd="coverage run"
else
    runcmd="python3 -u"
fi

if [ -d venv ]; then
    echo Entering virtual python environment...
    source venv/bin/activate
fi

echo Using python3 at `which python3`
echo Executing: $runcmd daq/daq.py $LOCAL_CONFIG $@

export PYTHONDONTWRITEBYTECODE=True
export TERM=dumb

exit_code=0
$runcmd daq/daq.py $LOCAL_CONFIG $@ || exit_code=$?

if [ -n "$DAQ_CODECOV" ]; then
    codecov
fi

if [ -f "$cleanup_file" ]; then
    source $cleanup_file
fi

echo Done with run, exit $exit_code

exit $exit_code
