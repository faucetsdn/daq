#!/bin/bash -e

ROOT=$(realpath $(dirname $0)/..)
INSTDIR=$ROOT/inst
IMAGE=daq/faux
local_config=$ROOT/local/system.conf
postfix=
intf_mac=9a:02:57:1e:8f:00

cd $ROOT
source misc/config_base.sh

# If the first argument is a number, then it's a port designation.
if [ $# -gt 0 -a $(($1)) -gt 0 ]; then
    port_num=$1
    postfix=-$port_num
    intf_mac=9a:02:57:1e:8f:0$port_num
    shift
fi


if ifconfig "$1" > /dev/null 2>&1 ; then
    realintf=$1
    postfix=-$realintf
    echo Running using interface $realintf
    shift
fi

FAUX_ARGS="$*"

CONTAINER=daq-faux$postfix

if [ -z "$FAUX_ARGS" ]; then
    FAUX_ARGS="$faux_args"
fi

echo Launching faux $FAUX_ARGS...

mkdir -p $INSTDIR

if docker container inspect $CONTAINER --format '{{ .Name }}' > /dev/null 2>&1; then
    echo -n "Clensing old container "
    docker rm -f $CONTAINER
fi

docker_args="\
        -v $INSTDIR/faux:/tmp \
        "

cid=$(docker run -d --privileged --name $CONTAINER --hostname $CONTAINER --net=none $docker_args $IMAGE $FAUX_ARGS)
pid=$(docker inspect --format="{{ .State.Pid }}" $cid)

echo DAQ autoclean docker kill $CONTAINER

if [ -n "$realintf" ]; then
    echo Moving $realintf into $pid...
    sudo ip link set $realintf netns $pid
    docker exec $CONTAINER ip link set $realintf name faux-eth0
    docker exec $CONTAINER ip link set faux-eth0 up
    docker exec $CONTAINER ifconfig faux-eth0
else
    intf=faux$postfix
    echo Removing old interface $intf
    sudo ip link del $intf 2>/dev/null || true

    echo Adding new interface to $pid...
    sudo ip link add $intf type veth peer name faux-eth0 addr $intf_mac netns $pid
    sudo ip link set $intf up
fi

echo Done with faux device launch.
