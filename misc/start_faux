#!/bin/bash

echo Starting faux device at `date` with $*

declare -A options
for option in $*; do
    options[$option]=$option
done

# Disable docker's built-in resolv mechanism and install standard resolvconf.
# Can't do this at runtime since it requires permissions that aren't availble
# at build time.
umount /etc/resolv.conf
dpkg -i resolvconf_*.deb

while ! ifconfig -a | fgrep -q faux-eth0; do
    echo Waiting for faux-eth0 to exist...
    sleep 1
done

ip addr show faux-eth0

if [ -n "${options[xdhcp]}" ]; then
    echo Assigning static ip address...
    ip link set up dev faux-eth0
    ip addr add 10.20.0.5/8 dev faux-eth0
    ip addr show faux-eth0
else
    echo Running dhclient...
    dhclient
    ip addr show faux-eth0
fi

# Pick the one not-lo inet v4 address.
ipline=$(ip addr show | fgrep "inet " | fgrep -v 127.0.0.1)
read -r -a parts <<< "$ipline"
local_ip=${parts[1]%/*}
broadcast_ip=${parts[3]}

echo Faux device at $local_ip bcast $broadcast_ip

# Setup dummy telnet listener to trigger port-scan failure
if [ -n "${options[telnet]}" ]; then
    echo Enabling mock telnet server...
    nc -lk -p 23 -e date &
fi

if [ -n "${options[bacnet]}" ]; then
    echo Starting bacnet loop device.
    java -cp bacnet4j/bacnet4j-1.0-SNAPSHOT-all.jar com.serotonin.bacnet4j.test.LoopDevice $local_ip $broadcast_ip &
fi

if [ -n "${options[discover]}" ]; then
    echo Starting bacnet discover loop.
    (while true; do bin/bacnet_discover; sleep 1; done) &
fi

if [ -n "${options[curl]}" ]; then
    echo Starting curl loop.
    (while true; do curl -o - http://google.com; sleep 1; done) &
fi

echo Blocking for all eternety.
tail -f /dev/null
