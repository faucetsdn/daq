#!/bin/bash

# A script to retrieve, and collate several raw brute force dictionaries into one large file.
# Usage ./create_brute_force_dictionary
#
# Process:
# - Retrieve the manufacturer defaults .csv dictionary file, and the two colon separated dictionaries for ssh/telnet.
# - For the csv file, convert each line into a username:password pair, append them to the temp file.
# - For the txt files, simply append them into the temp file.
# - Remove duplicates, empty lines and sort the temp file into the output file.

OUTPUT_DICTIONARY=resources/dictionary.txt
TEMP_DICTIONARY=resources/tmp_dictionary.txt
MANUFACTURER_DEFAULTS_DICTIONARY=resources/manufacturer.csv
SSH_DICTIONARY=resources/ssh.txt
TELNET_DICTIONARY=resources/telnet.txt

# Retrieve the raw dictionary files from the gitlab source.
# $1 Manufacturer dictionary
# $2 SSH dictionary
# $3 Telnet dictionary
function retrieve_raw_dictionaries() {
  curl https://gitlab.com/kalilinux/packages/seclists/-/raw/094459e5d757faccfcb44375a2e4c9602d5984d4/Passwords/Default-Credentials/default-passwords.csv \
    --create-dirs --output $1
  curl https://gitlab.com/kalilinux/packages/seclists/-/raw/094459e5d757faccfcb44375a2e4c9602d5984d4/Passwords/Default-Credentials/ssh-betterdefaultpasslist.txt \
    --create-dirs --output $2
  curl https://gitlab.com/kalilinux/packages/seclists/-/raw/094459e5d757faccfcb44375a2e4c9602d5984d4/Passwords/Default-Credentials/telnet-betterdefaultpasslist.txt \
    --create-dirs --output $3
}

# Create the temporary and output dictionaries, and remove existing ones.
# $1 Temporary dictionary file.
# $2 Output dictionary file.
function create_dictionary() {
  mkdir -p "resources"

  if [ -f $1 ]; then
    rm $1
  fi

  if [ -f $2 ]; then
    rm $2
  fi

  touch $1
  touch $2
}

# Helps avoid certain special characters which cause grep to fail
# $1 Line string in file
function line_is_invalid_csv() {
  echo $1 | grep -sqE "^\".*\"|\s|,,"
}

# Helps avoid certain special usernames/passwords which cause grep to fail.
# $1 Username or password string
function username_or_password_is_invalid() {
  echo $1 | grep -sqE "<BLANK>|<N/A>"
}

# Append the username and password pair into the output dictionary with colon separation.
# $1 Username
# $2 Password
# $3 Output dictionary
function add_colon_pair_to_output_dictionary() {
  if ! username_or_password_is_invalid $1; then
    if ! username_or_password_is_invalid $2; then
      echo "$1:$2" >> $3
    fi
  fi
}

# Convert lines in the manufacturer csv file into colon separated username:password pairs, then append them to file.
# $1 Raw dictionary
# $2 Output dictionary
function append_manufacturer_csv_to_output_dictionary() {
  while read LINE
  do
    if ! line_is_invalid_csv "$LINE"; then
      IFS=',' read -ra CREDENTIAL_ARRAY <<< "$LINE"
      USERNAME="${CREDENTIAL_ARRAY[1]}"
      PASSWORD="${CREDENTIAL_ARRAY[2]}"
      add_colon_pair_to_output_dictionary $USERNAME $PASSWORD $2
    fi
  done < $1
}

# Add colon separated txt file into the output dictionary.
# $1 Output dictionary file
# $2 Colon separated file
function append_colon_separated_file_to_output_dictionary() {
  cat $2 >> $1
}

# Removes duplicates, empty lines and sorts temporary dictionary, saving into the output dictionary.
# $1 Temporary dictionary file
# $2 Output dictionary file
function clean_output_dictionary() {
  cat $1 | tr -d "/" | tr -d "$" | tr -d "%" | tr -d ">" | sed -E '/^$/d' | sort -u > $2
}

# Main function:

echo "Running with MAC: $1"
echo Creating credential files...
create_dictionary $TEMP_DICTIONARY $OUTPUT_DICTIONARY

echo Retrieving raw dictionaries from sources
retrieve_raw_dictionaries $MANUFACTURER_DEFAULTS_DICTIONARY $SSH_DICTIONARY $TELNET_DICTIONARY

echo Parsing CSV file...
append_manufacturer_csv_to_output_dictionary $MANUFACTURER_DEFAULTS_DICTIONARY $TEMP_DICTIONARY

echo Parsing SSH passwords file...
append_colon_separated_file_to_output_dictionary $TEMP_DICTIONARY $SSH_DICTIONARY

echo Parsing telnet passwords file...
append_colon_separated_file_to_output_dictionary $TEMP_DICTIONARY $TELNET_DICTIONARY

echo Cleaning up output dictionary...
clean_output_dictionary $TEMP_DICTIONARY $OUTPUT_DICTIONARY

echo Done!
