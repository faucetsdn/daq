#!/bin/bash

# A test which runs a dictionary brute force attack using ncrack/medusa, saving the result into a file afterwards.
#
# Supports http, https, telnet and ssh protocols on their specified ports.
#
# Assumes the following files are in the dictionary directory:
# - dictionary.txt (File with format ":username:password")
# - usernames.txt (File with a list of usernames, one on each line)
# - passwords.txt (File with a list of passwords, one on each line)
#
# Usage: ./run_password_test_for_protocol $TARGET_IP, $PROTOCOL, $PORT, $DICTIONARY_DIR, $RESULTS_DIR

TARGET_IP=$1
PROTOCOL=$2
PORT=$3
DICTIONARY_DIR=$4
RESULT_DIR=$5

DICTIONARY="$DICTIONARY_DIR/dictionary.txt"
USERNAMES="$DICTIONARY_DIR/usernames.txt"
PASSWORDS="$DICTIONARY_DIR/passwords.txt"
RESULT_FILE="${RESULT_DIR}/security_password_${PROTOCOL}.result"

# Runs the nmap on a target host and port. Returns the output of the command.
# $1 Target IP
# $2 Target Port
function run_nmap_and_get_command() {
  NMAP_OUTPUT=$(nmap -p $2 $1)
  echo "$NMAP_OUTPUT"
}

# Return true if grep finds a match for the nmap port open message which looks like: e.g. "80/tcp open http"
# $1 Nmap command output
# $2 Target protocol
# $3 Target port
function is_specified_port_open() {
  echo "$1" | grep -q "$3.*open.*$2"
}

# Returns true if grep can find the host down message from the Nmap output
# $1 Nmap command output
function is_host_down() {
  echo "$1" | grep -q "Host seems down"
}

# Checks if http or https has authentication.
# $1 Target protocol (HTTP or HTTPS)
# $2 Target IP
# $3 Target port
function does_http_or_https_have_authentication() {
  if [[ $1 == "http" || $1 == "https" ]]; then
    echo "$(curl -k -s -I $1://$2:$3)" | grep -q "401 Unauthorized"
  fi
}

# Runs the brute force using ncrack/medusa, and returns the output. Redirect stderr into stdout also.
# $1 Target IP
# $2 Target protocol
# $3 Target port
# $4 Colon separated brute force dictionary for medusa
# $5 Username list for ncrack
# $6 Password list for ncrack
function run_brute_force_and_get_command_new() {
  if [ "$2" == "http" ]; then
    ncrack_output=$(ncrack --pairwise -v -U $5 -P $6 http://$1:$3 2>&1)
    echo "$ncrack_output"
  elif [ "$2" == "https" ]; then
    ncrack_output=$(ncrack --pairwise -v -U $5 -P $6 https://$1:$3 2>&1)
    echo "$ncrack_output"
  elif [ "$2" == "ssh" ]; then
    medusa_output=$(medusa -C $4 -h $1 -M ssh -n $3 -v 4 2>&1)
    echo "$medusa_output"
  elif [ "$2" == "telnet" ]; then
    ncrack_output=$(ncrack --pairwise -v -U $5 -P $6 -T2 telnet://$1:$3 2>&1)
    echo "$ncrack_output"
  fi
}

# Returns true if grep can find the success message in the brute force output.
# $1 ncrack/medusa output
function brute_force_successful() {
  echo "$1" | grep -qE "Discovered credentials|\[SUCCESS\]"
}

# True if "timed-out/prematurely-closed" is present and their values are not zero.
# $1 ncrack/medusa output
function ncrack_brute_force_skip() {
  echo "$1" | grep -oE "timed-out: [0-9]+ \| prematurely-closed: [0-9]+" | grep -qvE "timed-out: 0 \| prematurely-closed: 0"
}

# True if ALERT or NOTICE are in the output.
# $1 ncrack/medusa output
function medusa_brute_force_skip() {
  echo "$1" | grep -qE "NOTICE:|ALERT:|ERROR:|FATAL:"
}

# Writes the test result into a file.
# $1 Target protocol
# $2 Target port
# $3 Result code
function write_to_result_file() {
  mkdir -p $RESULT_DIR

  if [ -f $RESULT_FILE ]; then
    rm $RESULT_FILE
  fi
  touch $RESULT_FILE

  if [ "$3" == "pass" ]; then
    echo "RESULT pass security.passwords.$1 Was not able to brute force using dictionary." > $RESULT_FILE
  elif [ "$3" == "fail" ]; then
    echo "RESULT fail security.passwords.$1 Was able to brute force using dictionary." > $RESULT_FILE
  elif [ "$3" == "skip_no_host" ]; then
    echo "RESULT skip security.passwords.$1 Unable to connect to host." > $RESULT_FILE
  elif [ "$3" == "skip_no_port" ]; then
    echo "RESULT skip security.passwords.$1 Port $2 not open on target device." > $RESULT_FILE
  elif [ "$3" == "skip_ncrack_error" ]; then
    echo "RESULT skip security.passwords.$1 Skipping due to brute force issue with ncrack. Please see log." > $RESULT_FILE
  elif [ "$3" == "skip_medusa_error" ]; then
    echo "RESULT skip security.passwords.$1 Skipping due to brute force issue with medusa. Please see log." > $RESULT_FILE
  elif [ "$3" == "skip_http_error" ]; then
    echo "RESULT skip security.passwords.$1 Skipping due to http(s) server not having authentication method." > $RESULT_FILE
  fi
}

# Main function:

NMAP_OUTPUT="$(run_nmap_and_get_command $TARGET_IP $PORT)"
echo "$NMAP_OUTPUT"

if ! is_host_down "$NMAP_OUTPUT"; then

  if is_specified_port_open "$NMAP_OUTPUT" $PROTOCOL $PORT; then
    BRUTE_FORCE_OUTPUT="$(run_brute_force_and_get_command_new $TARGET_IP $PROTOCOL $PORT $DICTIONARY $USERNAMES $PASSWORDS)"
    echo "$BRUTE_FORCE_OUTPUT"

    if ! does_http_or_https_have_authentication $PROTOCOL $TARGET_IP $PORT; then
      echo "Will not start brute force as http(s) server has no authentication."
      RESULT="skip_http_error"
    elif ncrack_brute_force_skip "$BRUTE_FORCE_OUTPUT"; then
      echo "Could not brute force due to an issue with ncrack at runtime. Please check log."
      RESULT="skip_ncrack_error"
    elif medusa_brute_force_skip "$BRUTE_FORCE_OUTPUT"; then
      echo "Could not brute force due to an issue with medusa at runtime. Please check log."
      RESULT="skip_medusa_error"
    elif brute_force_successful "$BRUTE_FORCE_OUTPUT"; then
      echo "Was able to brute force using dictionary."
      RESULT="fail"
    else
      echo "Could not brute force using dictionary."
      RESULT="pass"
    fi

  else
    echo "Could not connect to specified port on host."
    RESULT="skip_no_port"
  fi

else
  echo "Could not connect to host."
  RESULT="skip_no_host"
fi

write_to_result_file $PROTOCOL $PORT $RESULT
