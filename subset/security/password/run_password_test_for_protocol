#!/bin/bash

# A test which runs a dictionary brute force attack using THC Hydra and printing out the result afterwards.
# Supports http, https, telnet and ssh protocols.
# Usage: ./run_password_test_for_protocol $TARGET_IP, $PROTOCOL, $PORT, $DICTIONARY
# E.g. ./run_password_test_for_protocol 127.0.0.1 http 80 resources/dictionary.txt

# Process:
# 1. Use Nmap to check if a specific port is open, and whether the target host is down.
# 2. If target port is open, and target host is not down, then start the brute force.
# 3. Run the brute force command for hydra, and collect its output.
# 4. Depending on the messages seen on the output, the test will return a specific case.
#   - SKIP: Test was not able to run a brute force successfully due to other issues.
#   - FAIL: Test was able to run the brute force and guess the username/password pairs.
#   - PASS: Test was able to run the brute force but not guess the username/password pairs.

TARGET_IP=$1
PROTOCOL=$2
PORT=$3
DICTIONARY=$4

RESULT_FOLDER="reports"
RESULT_FILE="${RESULT_FOLDER}/${PROTOCOL}_result.txt"

# Runs the nmap on a target host and port. Returns the output of the command.
# $1 Target IP
# $2 Target Port
function run_nmap_and_get_command() {
  NMAP_OUTPUT=$(nmap -p $2 $1)
  echo "$NMAP_OUTPUT"
}

# Return true if grep finds a match for the nmap port open message which looks like: e.g. "80/tcp open http"
# $1 Nmap command output
# $2 Target protocol
# $3 Target port
function is_specified_port_open() {
  echo "$1" | grep -q "$3.*open.*$2"
}

# Returns true if grep can find the host down message from the Nmap output
# $1 Nmap command output
function is_host_down() {
  echo "$1" | grep -q "Host seems down"
}

# Runs the brute force using hydra, and returns the stdout, including stderr.
# $1 Target IP
# $2 Target protocol
# $3 Target port
# $4 Brute force dictionary
function run_brute_force_and_get_command() {
  if [ "$2" == "http" ]; then
    hydra_output=$(hydra -v -F -I -t 4 -C $4 $1 http-get -s $3 2>&1)
    echo "$hydra_output"
  elif [ "$2" == "https" ]; then
    hydra_output=$(hydra -v -F -I -t 4 -C $4 $1 https-get -s $3 2>&1)
    echo "$hydra_output"
  else
    hydra_output=$(hydra -v -F -I -t 4 -C $4 $1 $2 -s $3 2>&1)
    echo "$hydra_output"
  fi
}

# Returns true if grep can find the success message in the hydra output.
# $1 Hydra output
function brute_force_successful() {
  echo "$1" | grep -q "successfully completed"
}

# Returns true if grep can find the "[ERROR] <Error message>" lines in the hydra output.
# $1 Hydra output
function brute_force_skip() {
  echo "$1" | grep -q "\[ERROR\]"
}

# Returns true if grep can find the 0 passwords found message.
# $1 Hydra output
function brute_force_unsuccessful() {
  echo "$1" | grep -q "0 valid passwords found"
}

# Writes the test result into a file.
# $1 Target protocol
# $2 Target port
# $3 Result code
function write_to_result_file() {
  mkdir -p $RESULT_FOLDER

  if [ -f $RESULT_FILE ]; then
    rm $RESULT_FILE
  fi
  touch $RESULT_FILE

  if [ "$3" == "pass" ]; then
    echo "RESULT pass security.passwords.$1 Was not able to brute force using dictionary." > $RESULT_FILE
  elif [ "$3" == "fail" ]; then
    echo "RESULT fail security.passwords.$1 Was able to brute force using dictionary." > $RESULT_FILE
  elif [ "$3" == "skip_no_host" ]; then
    echo "RESULT skip security.passwords.$1 Unable to connect to host." > $RESULT_FILE
  elif [ "$3" == "skip_no_port" ]; then
    echo "RESULT skip security.passwords.$1 Port $2 not open on target device." > $RESULT_FILE
  elif [ "$3" == "skip_hydra_error" ]; then
    echo "RESULT skip security.passwords.$1 Skipping due to hydra error, please see log." > $RESULT_FILE
  fi
}

# Main function:

NMAP_OUTPUT="$(run_nmap_and_get_command $TARGET_IP $PORT)"
echo "$NMAP_OUTPUT"

if ! is_host_down "$NMAP_OUTPUT"; then

  if is_specified_port_open "$NMAP_OUTPUT" $PROTOCOL $PORT; then
    BRUTE_FORCE_OUTPUT="$(run_brute_force_and_get_command $TARGET_IP $PROTOCOL $PORT $DICTIONARY)"
    echo "$BRUTE_FORCE_OUTPUT"

    # If hydra has error messages.
    if brute_force_skip "$BRUTE_FORCE_OUTPUT"; then
      echo "Could not brute force due to hydra error."
      RESULT="skip_hydra_error"
    # If hydra can't find passwords and no errors occur.
    elif brute_force_unsuccessful "$BRUTE_FORCE_OUTPUT" $PROTOCOL; then
      echo "Could not brute force using dictionary."
      RESULT="pass"
    # If hydra finds the correct credentials and no errors occur.
    elif brute_force_successful "$BRUTE_FORCE_OUTPUT" $PROTOCOL; then
      echo "Was able to brute force using dictionary."
      RESULT="fail"
    fi

  else
    echo "Could not connect to specified port on host."
    RESULT="skip_no_port"
  fi

else
  echo "Could not connect to host."
  RESULT="skip_no_host"
fi

write_to_result_file $PROTOCOL $PORT $RESULT
