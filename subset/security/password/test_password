#!/bin/bash -e

# Entry point for the security.admin.password test - Runs the test on all protocols <http|https|telnet|ssh> in parallel
# and writes the output into reports file to be used by DAQ.

source reporting.sh

# Hard coded paths.
DAQ_REPORT="/tmp/report.txt"
RESULTS_DIR="/tmp/results"
LOG_DIR="/tmp/logs"
MODULE_CONFIG="/tmp/module_config.json"

# Hard coded files and names.
HTTP_LOG="$LOG_DIR/security_password_http.log"
HTTPS_LOG="$LOG_DIR/security_password_https.log"
SSH_LOG="$LOG_DIR/security_password_ssh.log"
TELNET_LOG="$LOG_DIR/security_password_telnet.log"

HTTP_RESULT="$RESULTS_DIR/security_password_http.result"
HTTPS_RESULT="$RESULTS_DIR/security_password_https.result"
SSH_RESULT="$RESULTS_DIR/security_password_ssh.result"
TELNET_RESULT="$RESULTS_DIR/security_password_telnet.result"

# Hard coded json keys for jq
DICTIONARY_DIR_KEY=".modules.password.dictionary_dir"
HTTP_PORT_KEY=".modules.password.http_port"
HTTPS_PORT_KEY=".modules.password.https_port"
SSH_PORT_KEY=".modules.password.ssh_port"
TELNET_PORT_KEY=".modules.password.telnet_port"
USER_SPECIFIED_USERNAME_KEY=".device_info.default_username"
USER_SPECIFIED_PASSWORD_KEY=".device_info.default_password"

# Default configuration values.
DICTIONARY_DIR="resources/default"
DEFAULT_PLACE_HOLDER="*** (optional) ***"
USER_SPECIFIED_DICTIONARY_DIR="resources/user_specified"
USER_SPECIFIED_DICTIONARY_FILE="resources/user_specified/dictionary.txt"
USER_SPECIFIED_USERNAME_FILE="resources/user_specified/usernames.txt"
USER_SPECIFIED_PASSWORD_FILE="resources/user_specified/passwords.txt"
HTTP_PORT=80
HTTPS_PORT=443
SSH_PORT=22
TELNET_PORT=23

# Retrieves the value specified in specified key from the module config.
# $1 Module config file path
# $2 jq JSON key string
function get_module_config_value_from_key() {
  cat $1 | jq $2 | tr -d '"'
}

# Retrieve a modified version of the test description for a protocol.
# $1 Protocol name
function get_test_description() {
  echo "Verify all device manufacturer default passwords are changed for protocol: $1, and new passwords are set."
}

# Retrieve a modified version of the test name for a protocol.
# $1 Protocol name
function get_test_name() {
  echo "security.admin.password.$1"
}

# Removes whitespace and colon from user specified string to avoid format issues with the brute force tools.
# $1 String to clean
function clean_credentials() {
  echo "$(echo $1 | sed -E 's/\s//' | tr -d ':')"
}

# Create a new dictionary directory in resources for the user specified credentials.
# $1 Username
# $2 Password
function create_dictionary_for_user_specified_credentials() {
  mkdir -p $USER_SPECIFIED_DICTIONARY_DIR

  username="$(clean_credentials "$1")"
  password="$(clean_credentials "$2")"

  echo ":$username:$password" > $USER_SPECIFIED_DICTIONARY_FILE
  echo "$username" > $USER_SPECIFIED_USERNAME_FILE
  echo "$password" > $USER_SPECIFIED_PASSWORD_FILE
}

# Main function

echo "Password test starting on docker container: $TARGET_IP..."

echo "Checking module_config.json for any default configurations to overwrite..."
NEW_DICTIONARY_DIR="$(get_module_config_value_from_key $MODULE_CONFIG $DICTIONARY_DIR_KEY)"
NEW_HTTP_PORT="$(get_module_config_value_from_key $MODULE_CONFIG $HTTP_PORT_KEY)"
NEW_HTTPS_PORT="$(get_module_config_value_from_key $MODULE_CONFIG $HTTPS_PORT_KEY)"
NEW_SSH_PORT="$(get_module_config_value_from_key $MODULE_CONFIG $SSH_PORT_KEY)"
NEW_TELNET_PORT="$(get_module_config_value_from_key $MODULE_CONFIG $TELNET_PORT_KEY)"
USER_SPECIFIED_USERNAME="$(get_module_config_value_from_key $MODULE_CONFIG $USER_SPECIFIED_USERNAME_KEY)"
USER_SPECIFIED_PASSWORD="$(get_module_config_value_from_key $MODULE_CONFIG $USER_SPECIFIED_PASSWORD_KEY)"

echo "Overwriting default configurations with user specified values... (If any). User specified credentials takes precedence over user specified dictionaries."

if [[ $USER_SPECIFIED_USERNAME != "null" && \
 $USER_SPECIFIED_USERNAME != $DEFAULT_PLACE_HOLDER && \
 $USER_SPECIFIED_PASSWORD != "null" && \
 $USER_SPECIFIED_PASSWORD != $DEFAULT_PLACE_HOLDER ]]; then

  create_dictionary_for_user_specified_credentials "$USER_SPECIFIED_USERNAME" "$USER_SPECIFIED_PASSWORD"
  DICTIONARY_DIR=$USER_SPECIFIED_DICTIONARY_DIR
  echo "User specified username/password pair found! -> $(clean_credentials "$USER_SPECIFIED_USERNAME") $(clean_credentials "$USER_SPECIFIED_PASSWORD")"
  echo "Proceeding to use these credentials! Dictionary directory is now -> $DICTIONARY_DIR"

elif [[ $NEW_DICTIONARY_DIR != "null" ]]; then

  DICTIONARY_DIR=$NEW_DICTIONARY_DIR
  echo "User specified username/password pair not found!"
  echo "Proceeding to use default/user specifed dictionary_dir -> $DICTIONARY_DIR"

fi

[ $NEW_HTTP_PORT != "null" ] && HTTP_PORT=$NEW_HTTP_PORT
[ $NEW_HTTPS_PORT != "null" ] && HTTPS_PORT=$NEW_HTTPS_PORT
[ $NEW_SSH_PORT != "null" ] && SSH_PORT=$NEW_SSH_PORT
[ $NEW_TELNET_PORT != "null" ] && TELNET_PORT=$NEW_TELNET_PORT

echo "Print out configurations set..."
echo "DICTIONARY_DIR: $DICTIONARY_DIR"
echo "HTTP_PORT: $HTTP_PORT"
echo "HTTPS_PORT: $HTTPS_PORT"
echo "SSH_PORT: $SSH_PORT"
echo "TELNET_PORT: $TELNET_PORT"

echo "Running password test for each protocol..."
mkdir -p $LOG_DIR
./run_password_test_for_protocol $TARGET_IP http $HTTP_PORT $DICTIONARY_DIR $RESULTS_DIR &> $HTTP_LOG &
./run_password_test_for_protocol $TARGET_IP https $HTTPS_PORT $DICTIONARY_DIR $RESULTS_DIR &> $HTTPS_LOG &
./run_password_test_for_protocol $TARGET_IP ssh $SSH_PORT $DICTIONARY_DIR $RESULTS_DIR &> $SSH_LOG &
./run_password_test_for_protocol $TARGET_IP telnet $TELNET_PORT $DICTIONARY_DIR $RESULTS_DIR &> $TELNET_LOG &
wait

echo "Writing test results and logs to DAQ report..."
write_out_result $DAQ_REPORT "$(get_test_name "http")" "$(get_test_description "http")" "$(cat $HTTP_LOG)" "$(cat $HTTP_RESULT)"
write_out_result $DAQ_REPORT "$(get_test_name "https")" "$(get_test_description "https")" "$(cat $HTTPS_LOG)" "$(cat $HTTPS_RESULT)"
write_out_result $DAQ_REPORT "$(get_test_name "ssh")" "$(get_test_description "ssh")" "$(cat $SSH_LOG)" "$(cat $SSH_RESULT)"
write_out_result $DAQ_REPORT "$(get_test_name "telnet")" "$(get_test_description "telnet")" "$(cat $TELNET_LOG)" "$(cat $TELNET_RESULT)"

echo "Done!"
