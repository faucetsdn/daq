
import xml.etree.ElementTree as ET
from nmap_port import nmap_port

class nmap_results_reader:
    """Reads NMAP scan XML outputs and parses open port information
    Ensure desired ports are included in the nmap command

    """

    _tree = None
    _root = None
    _ports = {}

    def __init__(self, nmap_results, *args):
        """Load NMAP Results Reader

        Args:
            results_file    path to XML file (nmap -xO run command)
            *args           additional XML files to merge into one
        
        Returns:
            Instance of NMAP results reader
        
        """
        self._tree = ET.parse(nmap_results)
        self._root = self._tree.getroot()

        for port in self._root.iter('port'):
            service = 'unknown'

            port_number = port.attrib['portid']
            protocol = port.attrib['protocol']
            port_state = port.find('state').attrib['state']
            
            # Calculate if port is considered to be open or closed
            # https://nmap.org/book/man-port-scanning-basics.html
            # we consider filtered (i.e. iptables) to be closed
            port_open = (True if port_state == 'open' else False) 

            if port.find('service'):
                service = port.find('service').attrib['name']

            self._ports[port_number] = nmap_port(
                port = port_number,
                protocol = protocol,
                state = port_state,
                service = service,
                open = port_open
             )


    def get_service(self, protocol, service):
        """ Get services from NMAP Result
        A matched service requires a port to be open 
        
        Args:
            service     name of service as called in NMAP. 
                        note TLS reslts in <service>/tls
        
        Returns:
            Dictionary of ports which are considered open and are found to be running the service und and nmap_port 
            dataclass or None if not found
        """
        return {k: v for k, v in self._ports.items() if \
            v.service == service and v.protocol == protocol}

    def get_open_port(self, protocol, port_number):
        """ Get port for an open port from NMAP Result
        
        Args:
            port     port number
        
        Returns:
           nmap_port data class or None if port was not in NMAP scan results 
           or was considered closed
        """
        port = self._ports.get(str(port_number))
        
        if port and port.protocol == protocol:
            return port

        return None

if __name__ == "__main__":
    pass
