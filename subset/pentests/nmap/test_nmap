#!/bin/bash -e

source $TEST_ROOT/reporting.sh
CONFIG=$TEST_ROOT/config/device/module_config.json
REPORT=$TEST_ROOT/tmp/report.txt

# security.nmap.ports test variables
REPORT_NMAP=$TEST_ROOT/tmp/report_nmap.txt
LOG_NMAP=$TEST_ROOT/tmp/nmap.log
OPENPORTSLIST_LOG_NMAP=$TEST_ROOT/tmp/nmap.ports.log
REDACTED_LOG_NMAP=$TEST_ROOT/tmp/nmap.report.log
TEST_NAME_NMAP="security.nmap.ports"
TEST_DESCRIPTION_NMAP="Automatic TCP/UDP port scan using nmap"
SUMMARY_NMAP=""

# security.nmap.http test variables
REPORT_HTTP=$TEST_ROOT/tmp/report_http.txt
LOG_HTTP=$TEST_ROOT/tmp/http.log
OPENPORTSLIST_LOG_HTTP=$TEST_ROOT/tmp/http.ports.log
REDACTED_LOG_HTTP=$TEST_ROOT/tmp/http.report.log
TEST_NAME_HTTP="security.nmap.http"
TEST_DESCRIPTION_HTTP="Check that the device does not have open ports exposing an unencrypted web interface using HTTP"
SUMMARY_HTTP=""

# remove temporary files
rm -f $LOG_NMAP $REDACTED_LOG_NMAP $OPENPORTSLIST_LOG_NMAP $REPORT_NMAP
rm -f $LOG_HTTP $REDACTED_LOG_HTTP $OPENPORTSLIST_LOG_HTTP $REPORT_HTTP

# configure and run the security.nmap.ports test
if [ -f $CONFIG ]; then
    echo Extracting servers config from $CONFIG
else
    echo No module config $CONFIG.
fi

echo -e "\nPinging target $TARGET_IP"
ping -n -c 20 $TARGET_IP

echo -e "\nTesting target $TARGET_IP port 23 (telnet)"
nc -nzv $TARGET_IP -w 5 23 || true
nc -nzv $TARGET_IP -w 5 23 || true
sleep 1
nc -nzv $TARGET_IP -w 5 23 || true
sleep 1

option="-sT"
portslist=-p1-65535
if [ -f $CONFIG ]; then
  # get list of ports to be scanned from module_config.json
  ports="U:"
  for k in $(jq '.servers.udp.ports | keys | .[]' $CONFIG); do
    ports=$ports$k","
  done
  if [ $ports != "U:" ]; then
    option="$option -sU"
  fi   

  ports=$ports"T:"
  for k in $(jq '.servers.tcp.ports | keys | .[]' $CONFIG); do
    ports=$ports$k","
  done
  portslist=$(echo $ports | sed 's/"//g')
  if [ $portslist != "U:T:" ]; then
    portslist="-p$portslist"
  else
    portslist=-p1-65535
  fi
fi

echo -e "\nTesting target $TARGET_IP to check open ports $portslist"
nmap -v -n -T5 $option --host-timeout=4m --open $portslist -oG $LOG_NMAP $TARGET_IP > /dev/null
cat $LOG_NMAP

touch $REDACTED_LOG_NMAP
cat $LOG_NMAP | tee -a $REDACTED_LOG_NMAP
touch $REPORT_NMAP
touch $OPENPORTSLIST_LOG_NMAP
rm -f $TEST_ROOT/.fail
grep -oh '[0-9]*/open[^[:space:]]*' $LOG_NMAP | while IFS=/ read -ra parts; do
    state=${parts[1]}
    if [ "$state" == open ]; then
        if [ -f $CONFIG ]; then
            port=${parts[0]}
            proto=${parts[2]}
            allowed=$(jq ".servers.$proto.ports.\"$port\".allowed" $CONFIG)
            if [ "$allowed" != true ]; then
                touch $TEST_ROOT/.fail
                echo Failing ${parts[*]} | sed 's/,$//' | tee -a $REDACTED_LOG_NMAP
                echo -n ${parts[0]}"," | tee -a $OPENPORTSLIST_LOG_NMAP
            else
                echo Allowing ${parts[*]} | sed 's/,$//' | tee -a $REDACTED_LOG_NMAP
            fi
        else
            echo Open port ${parts[*]} | sed 's/,$//' | tee -a $REDACTED_LOG_NMAP
            echo -n ${parts[0]}"," | tee -a $OPENPORTSLIST_LOG_NMAP
            touch $TEST_ROOT/.fail
        fi
    fi
done

if [ -f $TEST_ROOT/.fail ]; then
    echo Open ports:
    cat $REDACTED_LOG_NMAP
    result=fail
    SUMMARY_NMAP="Some disallowed ports are open: `cat $OPENPORTSLIST_LOG_NMAP | sed 's/,$//'`."
else
    echo No invalid ports found. | tee -a $REDACTED_LOG_NMAP
    result=pass
    SUMMARY_NMAP="Only allowed ports found open."
fi

RESULT_AND_SUMMARY_NMAP="RESULT $result $TEST_NAME_NMAP $SUMMARY_NMAP"

# configure and run the security.nmap.http test
option="-A --script http-methods" # Full NSE scan with the http-methods script
portslist=-p- # scan all ports 
echo -e "\nTesting target $TARGET_IP to check open ports exposing HTTP servers"
nmap -v -n -T5 $option --host-timeout=4m --open $portslist -oG $LOG_HTTP $TARGET_IP > /dev/null
cat $LOG_HTTP

touch $REDACTED_LOG_HTTP
cat $LOG_HTTP | tee -a $REDACTED_LOG_HTTP
touch $REPORT_HTTP
touch $OPENPORTSLIST_LOG_HTTP
rm -f $TEST_ROOT/.fail
grep -oh '[0-9]*/open[^[:space:]]*' $LOG_HTTP | while IFS=/ read -ra parts; do
    state=${parts[1]}
    if [ "$state" == open ]; then
        port=${parts[0]}
        proto=${parts[4]}
        echo $proto
        if [ "$proto" == http ]; then
            touch $TEST_ROOT/.fail
            echo Failing ${parts[*]} | sed 's/,$//' | tee -a $REDACTED_LOG_HTTP
            echo -n ${parts[0]}"," | tee -a $OPENPORTSLIST_LOG_HTTP
        fi
    fi
done

if [ -f $TEST_ROOT/.fail ]; then
    echo Open http ports:
    cat $REDACTED_LOG_HTTP
    result=fail
    SUMMARY_HTTP="Some ports are running http servers: `cat $OPENPORTSLIST_LOG_HTTP | sed 's/,$//'`."
else
    echo No running http servers have been found. | tee -a $REDACTED_LOG_HTTP
    result=pass
    SUMMARY_HTTP="No running http servers have been found."
fi

RESULT_AND_SUMMARY_HTTP="RESULT $result $TEST_NAME_HTTP $SUMMARY_HTTP"

# output test results to the report file
write_out_result $REPORT_NMAP \
                 "$TEST_NAME_NMAP" \
                 "$TEST_DESCRIPTION_NMAP" \
                 "$(cat $REDACTED_LOG_NMAP)" \
                 "$RESULT_AND_SUMMARY_NMAP"

write_out_result $REPORT_HTTP \
                 "$TEST_NAME_HTTP" \
                 "$TEST_DESCRIPTION_HTTP" \
                 "$(cat $REDACTED_LOG_HTTP)" \
                 "$RESULT_AND_SUMMARY_HTTP"

cat $REPORT_NMAP $REPORT_HTTP > $REPORT
