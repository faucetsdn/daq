#!/bin/bash -e

source $TEST_ROOT/reporting.sh

CONFIG=$TEST_ROOT/config/device/module_config.json
REPORT=$TEST_ROOT/tmp/report.txt

REPORT_NMAP=$TEST_ROOT/tmp/report_nmap.txt
REPORT_HTTP=$TEST_ROOT/tmp/report_http.txt

if [[ -f $CONFIG ]]; then
    services_scan=$(jq '.modules.nmap.services_scan' $CONFIG)
else
    services_scan=true
fi

if [[ $services_scan == true || $services_scan == null ]]; then
    # run full services scan
    echo "running full services scan"
    rm -f $REPORT_NMAP

    nmap -sV -p- --allports --version-intensity 7 -T4 -oX services_scan.xml $TARGET_IP

    # Minimum UDP ports for test_nmap.py 
    udp_ports='69,161,162,'

    # Read module_config for UDP ports so security.nmap.ports behavior
    # matches test_nmap_legacy
    if [[ -f $CONFIG ]]; then
        for k in $(jq -r '.servers.udp.ports | keys | .[]' $CONFIG); do
            udp_ports="$udp_ports$k,"
        done
    fi

    nmap -sU -p $udp_ports -oX udp_scan.xml $TARGET_IP

    python3 test_nmap.py ./tmp/report_nmap.txt \
        module_config.json \
        services_scan.xml udp_scan.xml
    
else   
    # run the legacy selected ports only scan
    echo "running legacy nmap scan"
    ./test_nmap_legacy
fi

# Run NMAP HTTP Test 
# Logic for http_scan is within the test script itself
./test_nmap_http "$@"

cat $REPORT_NMAP $REPORT_HTTP > $REPORT

