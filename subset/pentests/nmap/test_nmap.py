""" DAQ NMAP Module

This module only checks existing NMAP scan results therefore the scans
referenced must already have include the required ports, protocols, services
checked here, otherwise the output will be invalid.

NMAP must be run with the -oX <file> option

usage: test_nmap.py [-h] report_file module_config nmap_xml [nmap_xml ...]

positional arguments:
  report_file    Path to text file report output
  module_config  Path to module_config
  nmap_xml       Path to nmap XML output file

Limitations:
-   Currently ignores whether a service is tunnel via SSL.
    Ability to filter non SSL encrypted services can be future addition

"""

from __future__ import absolute_import
import argparse
import dataclasses
from nmap_test import NmapTest
from nmap_test_result import NmapTestResult

TCP = 'tcp'
UDP = 'udp'


def parse_command_line_args():
    parser = argparse.ArgumentParser()

    parser.add_argument('report_file', type=str,
                        help='Path to text file report output')

    parser.add_argument('module_config', type=str,
                        help='Path to module_config')

    parser.add_argument('nmap_xml', type=str, nargs='+',
                        help='Path to nmap XML output file')

    return parser.parse_args()


def test_smtp(nmap):
    name = 'security.services.smtp'
    description = 'Check SMTP port 25, 465, 587 are not open and SMTP is not running on any port'
    result = nmap.test(protocol=TCP, ports=[25, 465, 587], services=['smtp', 'smtps'])
    nmap.write_report(name, description, result)


def test_telnet(nmap):
    name = 'security.services.telnet'
    description = 'Check TELNET port 23 is disabled and TELNET is not running on any port'
    result = nmap.test(protocol=TCP, ports=23, services='telnet')
    nmap.write_report(name, description, result)


def test_pop(nmap):
    name = 'security.services.pop'
    description = 'Check POP port 110 is disabled and POP is not running on any port'
    result = nmap.test(protocol=TCP, ports=[110, 995], services='pop3')
    nmap.write_report(name, description, result)


def test_imap(nmap):
    name = 'security.services.imap'
    description = 'Check IMAP port 143 is disabled and IMAP is not running on any port'
    result = nmap.test(protocol=TCP, ports=[143, 993], services='imap')
    nmap.write_report(name, description, result)


def test_ftp(nmap):
    name = 'security.services.ftp'
    description = 'Check FTP port 20/21 is disabled and FTP is not running on any port'
    result = nmap.test(protocol=TCP, ports=[20, 21], services='ftp')
    nmap.write_report(name, description, result)


def test_tftp(nmap):
    name = 'security.services.tftp'
    description = 'Check TFTP port 69 is disabled (UDP)'
    result = nmap.test(protocol=UDP, ports=69)
    nmap.write_report(name, description, result)


def test_vnc(nmap):
    name = 'security.services.vnc'
    description = 'Check VNC is disabled on any port'
    result = nmap.test(protocol=TCP, ports=5900, service=['vnc', 'vnc-http'])
    nmap.write_report(name, description, result)


def test_snmpv3(nmap):
    name = 'security.services.snmpv3'
    description = 'Check SNMP port 161/162 is disabled. If SNMP is an essential ' \
                  'service, check it supports version 3'
    result = nmap.test(protocol=UDP, ports=[161, 162])

    # If port is open, check if v3
    # and overide the fail into a pass
    if result.result:
        if nmap.search_product(result, 'SNMPv3'):
            result = dataclasses.replace(
                result,
                summary="SNMPv3 service running.",
                overall_result="pass")
        else:
            result = dataclasses.replace(
                result,
                summary="Port open and does not support SNMPv3")

    nmap.write_report(name, description, result)


def test_nmap_ports(nmap):
    name = 'security.nmap.ports'
    description = 'Ensure disallowed ports are not open'

    disallowed_tcp_ports = list(range(1, 65535))
    disallowed_udp_ports = list(range(1, 65535))

    allowed_tcp_ports = nmap.get_ports_from_config(args.module_config, TCP, True)
    allowed_udp_ports = nmap.get_ports_from_config(args.module_config, UDP, True)

    # Legacy behavior is anything not marked allowed is disallowed (including undefined)
    for port in allowed_tcp_ports:
        disallowed_tcp_ports.remove(int(port))

    for port in allowed_udp_ports:
        disallowed_udp_ports.remove(int(port))

    tcp_result = nmap.test(protocol=TCP, ports=disallowed_tcp_ports, inverse=True)
    udp_result = nmap.test(protocol=UDP, ports=disallowed_udp_ports, inverse=True)

    combined_result = tcp_result.result or udp_result.result
    result = NmapTestResult(combined_result, tcp_result.ports + udp_result.ports, [])

    if result.result:
        disallowed_ports = str.join(',', [v.port for v in result.ports])
        result.summary = f'Some disallowed ports are open: {disallowed_ports}.'

    nmap.write_report(name, description, result)


if __name__ == "__main__":
    args = parse_command_line_args()
    nmap_results = NmapTest(args.report_file, args.nmap_xml)

    # Run the tests
    test_nmap_ports(nmap_results)
    test_telnet(nmap_results)
    test_ftp(nmap_results)
    test_smtp(nmap_results)
    test_imap(nmap_results)
    test_pop(nmap_results)
    test_vnc(nmap_results)
    test_tftp(nmap_results)
    test_snmpv3(nmap_results)

    # Done - any additional actions (e.g. putting output into
    # /tmp/report.txt or additional tests) are in the calling script test_nmap
