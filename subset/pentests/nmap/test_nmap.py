""" DAQ NMAP Module

This module only checks existing NMAP scan results therefore the scans
referenced must already have include the required ports, protocols, services
checked here, otherwise the output will be invalid.

NMAP must be run with the -oX <file> option

usage: test_nmap.py [-h] report_file module_config nmap_xml [nmap_xml ...]

positional arguments:
  report_file    Path to text file report output
  module_config  Path to module_config
  nmap_xml       Path to nmap XML output file

Limitations:
-   Currently ignores whether a service is tunnel via SSL.
    Ability to filter non SSL encrypted services can be future addition

"""

import argparse
from __future__ import absolute_import
from nmap_test import NmapTest
from nmap_test_result import NmapTestResult

TCP = 'tcp'
UDP = 'udp'

def parse_command_line_args():
    parser = argparse.ArgumentParser()

    parser.add_argument('report_file', type=str,
                        help='Path to text file report output')

    parser.add_argument('module_config', type=str,
                        help='Path to module_config')

    parser.add_argument('nmap_xml', type=str, nargs='+',
                        help='Path to nmap XML output file')

    return parser.parse_args()


def test_smtp():
    name = 'security.services.smtp'
    description = 'SMTP servers running'
    result = nmap.test(protocol=TCP, ports=[25, 465, 587], services='smtp')
    nmap.write_report(name, description, result)


def test_telnet():
    name = 'security.services.telnet'
    description = 'Telnet servers not running'
    result = nmap.test(protocol=TCP, ports=23, services='telnet')
    nmap.write_report(name, description, result)


def test_pop():
    name = 'security.services.pop'
    description = 'POP servers not running'
    result = nmap.test(protocol=TCP, ports=[110, 993], services='pop')
    nmap.write_report(name, description, result)


def test_imap():
    name = 'security.services.imap'
    description = 'IMAP servers not running'
    result = nmap.test(protocol=TCP, ports=[143, 993], services='imap')
    nmap.write_report(name, description, result)


def test_ftp():
    name = 'security.services.ftp'
    description = 'FTP servers not running'
    result = nmap.test(protocol=TCP, ports=[20, 21], services='ftp')
    nmap.write_report(name, description, result)


def test_tftp():
    name = 'security.services.tftp'
    description = 'TFTP server not running'
    result = nmap.test(protocol=UDP, ports=69)
    nmap.write_report(name, description, result)


def test_snmp():
    name = 'security.services.snmp'
    description = 'SNMP service not running'
    result = nmap.test(protocol=UDP, ports=[161,162])
    nmap.write_report(name, description, result)


def test_nmap_ports():
    name = 'security.ports.nmap'
    description = 'Disallowed ports are not open'

    tcp_result = nmap.test(
        protocol=TCP,
        ports=nmap.get_ports_from_config(args.module_config, TCP, False))

    udp_result = nmap.test(
        protocol=UDP,
        ports=nmap.get_ports_from_config(args.module_config, UDP, False))

    combined_result = tcp_result.result or udp_result.result
    result = NmapTestResult(combined_result, tcp_result.ports + udp_result.ports, [])

    nmap.write_report(name, description, result)

args = parse_command_line_args()

nmap = NmapTest(args.report_file, args.nmap_xml)

# Run the tests
test_smtp()
test_ftp()
test_imap()
test_pop()
test_telnet()
test_tftp()
test_snmp()
test_nmap_ports()


# Done - any additional actions (e.g. putting output into
# /tmp/report.txt or additional tests) are in the calling script test_nmap
