""" Module with helper methods for NMAP testing
"""
import json
import re
from nmap_results_reader import NmapResultsReader
from nmap_test_result import NmapTestResult


class NmapTest:
    """Implements methods for DAQ NMAP tests

    Attributes:
        nmap_results    NmapResults object
    """

    _REPORT_DIVIDER = "--------------------"
    _report_file = ''

    nmap_results = None

    def __init__(self, report_file, nmap_files):
        self.nmap_results = NmapResultsReader(nmap_files)

        self._report_file = report_file

    def test(self, **kwargs):
        """ Tests if a port or service is found in the NMAP results

        Arguments:
            ports       array of port numbers to check
            services    array of service names to check

        Returns:
            True/false if any of the ports or services are found in the NMAP
            results (true usually being test result fail)
        """
        result = False

        protocol = kwargs.get('protocol')
        ports = kwargs.get('ports')
        services = kwargs.get('services')

        matched_ports = []
        matched_services = []

        if ports:
            ports = self._list(ports)
            for port in ports:
                found_port = self.nmap_results.get_open_port(protocol, port)
                if found_port:
                    result = True
                    matched_ports.append(found_port)

        if services:
            services = self._list(services)
            for service in services:
                found_service = self.nmap_results.get_service(protocol, service)
                if found_service:
                    result = True
                    matched_services.extend(found_service.values())

        return NmapTestResult(result, matched_ports, matched_services)

    def write_report(self, name, description, result):
        """ Write result output to DAQ the DAQ report

        Arguments:
            name        test name
            description test description
            result      nmap_result data class of results
        """
        report_output = (
            f'{self._REPORT_DIVIDER}\n'
            f'{name}\n'
            f'{self._REPORT_DIVIDER}\n'
            f'{description}\n'
            f'{self._REPORT_DIVIDER}\n'
            f'{result.log}\n'
            f'{self._REPORT_DIVIDER}\n'
            f'RESULT {result.overall_result} {name} {result.summary}\n')

        with open(self._report_file, 'a+') as report:
            report.write(report_output)

    def get_ports_from_config(self, module_config, protocol, allowed=None):
        """ Gets ports defined in module_config.json

        Arguments:
            Protocol    tcp or udp
            Allowed     If provided True returns only allowed ports,
                        False only disallowed ports, otherwise all ports
                        from module_config are returned

        Returns:
            List of port numbers (empty list if none)
        """
        with open(module_config) as file:
            module_config = json.load(file)

        try:
            filtered = module_config['servers'][protocol]['ports']

            if allowed is None:
                return [k for k, v in filtered.items()]

            return [k for k, v in filtered.items() if v['allowed'] == allowed]
        except KeyError:
            return []

    def _list(self, item):
        """ Given an parameter, if it is a string return it as a single element list

        Arguments:
            item    string or list

        Returns
            list
        """
        if not isinstance(item, list):
            return [item]

        return item

    def search_product(self, result, product):
        """ Search product in an result

        Arguments:
            result      NmapResult (from NmapTest.test())
            product     regular expression of product to find

        Returns
            True if product match found in result

        """
        matches = set(result.ports + result.services)
        for match in matches:
            if re.search(product, match.product):
                return True
