""" NMAP Results Reader module
"""

import xml.etree.ElementTree as ET
from nmap_port import NmapPort

class NmapResultsReader:
    """Reads NMAP scan XML outputs and parses open port information
    Ensure desired ports are included in the nmap command

    """

    _ports = {}

    def __init__(self, nmap_files):
        """Load NMAP Results Reader

        Args:
            nmap_files    list of path to XML files (nmap -xO run command)

        Returns:
            Instance of NMAP results reader

        """

        for nmap_file in nmap_files:
            tree = ET.parse(nmap_file)
            root = tree.getroot()

            for port in root.iter('port'):
                service = 'unknown'
                port_number = port.attrib['portid']
                protocol = port.attrib['protocol']
                port_state = port.find('state').attrib['state']

                # Calculate if port is considered to be open or closed
                # https://nmap.org/book/man-port-scanning-basics.html
                # we consider filtered (i.e. iptables) to be closed
                port_open = (True if port_state == 'open' else False)

                if port.find('service') is not None:
                    service = port.find('service').attrib['name']

                self._ports[port_number] = NmapPort(
                    port = port_number,
                    protocol = protocol,
                    state = port_state,
                    service = service,
                    open = port_open
                )


    def get_service(self, protocol, service):
        """ Get services from NMAP Result
        A matched service requires a port to be open

        Args:
            service     name of service as called in NMAP.

        Returns:
            Dictionary of ports which are considered open and are found to
            be running the service und and nmap_port dataclass or None if
            not found
        """
        return {k: v for k, v in self._ports.items() if \
            v.service == service and v.protocol == protocol}

    def get_open_port(self, protocol, port_number):
        """ Get port for an open port from NMAP Result

        Args:
            port     port number

        Returns:
           nmap_port data class or None if port was not in NMAP scan results
           or was considered closed
        """
        port = self._ports.get(str(port_number))

        if port and port.protocol == protocol:
            return port

        return None

if __name__ == "__main__":
    pass
