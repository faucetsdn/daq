""" NMAP Results Reader module
"""

from __future__ import absolute_import
import re
import xml.etree.ElementTree as ET
from nmap_port import NmapPort


class NmapResultsReader:
    """Reads NMAP scan XML outputs and parses open port information
    Ensure desired ports are included in the nmap command

    """

    _ports = {}

    def __init__(self, nmap_files):
        """Load NMAP Results Reader

        Args:
            nmap_files    list of path to XML files (nmap -xO run command)

        Returns:
            Instance of NMAP results reader

        """

        for nmap_file in nmap_files:
            tree = ET.parse(nmap_file)
            root = tree.getroot()

            for port in root.iter('port'):
                service = 'unknown'
                product = ''
                tunnel = ''
                port_number = port.attrib['portid']
                protocol = port.attrib['protocol']
                port_state = port.find('state').attrib['state']

                # Calculate if port is considered to be open or closed
                # https://nmap.org/book/man-port-scanning-basics.html
                # we consider filtered (i.e. iptables) and open-filtered (UDP
                # - not confirmed open) to be closed
                port_open = (True if port_state == 'open' else False)

                if port.find('service') is not None:
                    service = port.find('service').attrib['name']

                    if 'product' in port.find('service').attrib:
                        product = port.find('service').attrib['product']

                    if 'tunnel' in port.find('service').attrib:
                        tunnel = port.find('service').attrib['tunnel']

                self._ports[port_number] = NmapPort(
                    port=port_number,
                    protocol=protocol,
                    state=port_state,
                    service=service,
                    product=product,
                    tunnel=tunnel,
                    open=port_open
                )

    def get_service(self, protocol, service):
        """ Get services from NMAP Result
        A matched service requires a port to be open

        Args:
            service     name of service as called in NMAP.

        Returns:
            Dictionary of ports which are considered open and are found to
            be running the service und and nmap_port dataclass or None if
            not found
        """
        return {k: v for k, v in self._ports.items() if
                v.service == service and v.protocol == protocol}

    def get_open_port(self, protocol, port_number):
        """ Get port for an open port from NMAP Result

        Args:
            port     port number

        Returns:
           nmap_port data class or None if port was not in NMAP scan results
           or was considered closed
        """
        port = self._ports.get(str(port_number))

        if port and port.protocol == protocol and port.open:
            return port

        return None

    def get_product(self, protocol, product):
        """ Finds matching product in NMAP results

        Args:
            product     regex of product to search for

        Returns:
            Dictionary of ports which are considered open and are found to
            have a product name matching the supplied regex

        """
        return {k: v for k, v in self._ports.items() if
                v.protocol == protocol and re.search(product, v.product)}


if __name__ == "__main__":
    pass
