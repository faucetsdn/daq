from nmap_results_reader import nmap_results_reader
from nmap_test_result import nmap_test_result
import textwrap

class nmap_test:
    """Implements methods for DAQ NMAP tests
    """
    _REPORT_DIVIDER="--------------------"

    _report_file = ''

    def __init__(self, report_file, nmap_files):
        self._nmap_results = nmap_results_reader(nmap_files)
        self._report_file = report_file

    def test(self, **kwargs):
        """ Tests if a port or service is found in the NMAP results

        Arguments:
            ports       array of port numbers to check
            services    array of service names to check
        
        Returns:
            True/false if any of the ports or services are found in the NMAP
            results (true usually being test result fail)
        """
        result = False

        protocol = kwargs.get('protocol')
        ports = kwargs.get('ports')
        services = kwargs.get('services')
        
        matched_ports = []
        matched_services = []

        if ports:
            if not isinstance(ports, list):
                ports = [ports]

            for port in ports:
                found_port = self._nmap_results.get_open_port(protocol, port)
                if found_port:
                    result = True
                    matched_ports.append(found_port)
        
        if services:
            if not isinstance(services, list):
                services = [services]
            
            for service in services:
                found_service = self._nmap_results.get_service(protocol, service)
                if found_service:
                    result = True
                    matched_services.extend(found_service.values())

        return nmap_test_result(result, matched_ports, matched_services)


    def write_report(self, name, description, result):
        """ Write result output to DAQ the DAQ report
        
        Arguments:
            name        test name
            description test description
            result      nmap_result data class of results
        """
        report_output = (
            f'{self._REPORT_DIVIDER}\n'
            f'{name}\n'
            f'{self._REPORT_DIVIDER}\n'
            f'{description}\n'
            f'{self._REPORT_DIVIDER}\n'
            f'{result.log}\n'
            f'{self._REPORT_DIVIDER}\n'
            f'RESULT {result.overall_result} {name} {result.summary}\n') 
  
        with open(self._report_file, 'a+') as f:
            f.write(report_output)

if __name__ == "__main__":
   pass
