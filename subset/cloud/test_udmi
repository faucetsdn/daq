#!/bin/bash -e

source reporting.sh

echo Starting UDMI test run `date`

REPORT=/tmp/report.txt
GCP_REFLECT_CONFIG_FILE=/config/inst/gcp_reflect_config.json
GCP_REFLECT_KEY_FILE=/config/inst/gcp_reflect_key.pkcs8
SITE_DIR=/config/inst
CLOUD_IOT_CONFIG_FILE=$SITE_DIR/cloud_iot_config.json
MODULE_CONFIG_FILE=/config/device/module_config.json

# Necessary to reach gcp. Should be done by framework but this works for now.
route add default gw $GATEWAY_IP
echo "nameserver 8.8.8.8" >> /etc/resolv.conf

schema_path=schema
timeout=60
message_types="state_system state_pointset event_system event_pointset"

site_model=$SITE_DIR
project_id=`jq -r .project_id $GCP_REFLECT_CONFIG_FILE`
registry_id=`jq -r .registry_id $GCP_REFLECT_CONFIG_FILE`
device_id=`jq -r .device_id $MODULE_CONFIG_FILE`
serial_no=`jq -r .device_info.serial $MODULE_CONFIG_FILE`

if [ "$device_id" == null ]; then
    skip="No device id"
elif [ ! -f $GCP_REFLECT_CONFIG_FILE ]; then
    skip="No credentials"
else
    skip=
fi

if [ -n "$skip" ]; then
    echo Skipping udmi test because $skip
    for message_type in provision $message_types; do
        TEST_NAME="cloud.udmi.$message_type"
        TEST_DESCRIPTION="Validates device $message_type payload."
        RESULT_AND_SUMMARY="RESULT skip $TEST_NAME $skip"
        write_out_result $REPORT "$TEST_NAME" "$TEST_DESCRIPTION" \
                         "$skip" "$RESULT_AND_SUMMARY"
    done
    exit 0
fi

export GOOGLE_CLOUD_PROJECT=$project_id

echo Target device is $device_id
echo Extracted project $project_id
echo Extracted registry $registry_id

ACTIVATE_LOG=/config/gw/nodes/gw*/activate.log
if fgrep "Processing provisioning request for device $device_id" $ACTIVATE_LOG; then
    result=pass
    detail="Found provisioning request %% $device_id"
else
    result=fail
    detail="No provisioning request"
fi
TEST_NAME="cloud.udmi.provision"
TEST_DESCRIPTION="Validates dynamic provisioning request"
RESULT_AND_SUMMARY="RESULT $result $TEST_NAME $detail"
write_out_result $REPORT "$TEST_NAME" "$TEST_DESCRIPTION" "n/a" "$RESULT_AND_SUMMARY"

echo Starting base message validation run `date`
echo validator/bin/validate $project_id $schema_path reflect $device_id $SITE_DIR
timeout $((timeout * 2)) validator/bin/validate $project_id $schema_path reflect $device_id $SITE_DIR || true

function message_report {
    message_type=$1
    base=out/devices/$device_id/$message_type
    ls -l $base* || true

    if [ -f "$base.out" ]; then
        result=fail
        detail=`head -n 1 $base.out`
        echo schema failures from $base.out
        cat $base.out
    elif [ -f "$base.json" ]; then
        result=pass
        detail="Payload successfully validated"
    else
        result=fail
        detail="No result found"
    fi

    TEST_NAME="cloud.udmi.$message_type"
    TEST_DESCRIPTION="Validates device $message_type payload."
    RESULT_AND_SUMMARY="RESULT $result $TEST_NAME $detail"
    write_out_result $REPORT "$TEST_NAME" "$TEST_DESCRIPTION" \
                     "$skip" "$RESULT_AND_SUMMARY"
}

for message_type in $message_types; do
    message_report $message_type
done

cat <<EOF > validator_config.json
{
  "project_id": "$project_id",
  "site_model": "$site_model",
  "device_id": "$device_id",
  "serial_no": "$serial_no",
  "key_file": "$GCP_REFLECT_KEY_FILE"
}
EOF

bin/test_sequences -n || true

results=out/devices/$device_id/RESULT.log
cat $results | while read header result test_name detail; do
    if [[ $header == RESULT ]]; then
        TEST_NAME="cloud.udmi.$test_name"
        TEST_DESCRIPTION="Validates $test_name sequence"
        RESULT_AND_SUMMARY="RESULT $result $TEST_NAME $detail"
        write_out_result $REPORT "$TEST_NAME" "$TEST_DESCRIPTION" \
                         "$skip" "$RESULT_AND_SUMMARY"
    fi
done

echo UDMI result summary:
fgrep RESULT $REPORT

echo Done with test_udmi
