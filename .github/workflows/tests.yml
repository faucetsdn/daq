# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: DAQ test suite

on:
  push:
  pull_request:
  schedule:
    - cron: '0 */2 * * *'

jobs:
  build_docker_faucet:
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Installing dependencies
      env:
        GIT_URL: ${{ secrets.GIT_URL }}
      run: |
        bin/setup_daq
    - name: Build faucet based docker images
      run: |
        DAQ_TARGETS=faucet,gauge cmd/build tar /tmp/build_artifacts/docker_images/
        docker image ls
        mkdir -p /tmp/build_artifacts
        cp .build_built /tmp/build_artifacts/
        cp .build_hash /tmp/build_artifacts/
    - uses: actions/upload-artifact@v2
      with:
          name: build_artifacts_faucet
          path: /tmp/build_artifacts/

  build_docker_faux:
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Installing dependencies
      env:
        GIT_URL: ${{ secrets.GIT_URL }}
      run: |
        bin/setup_daq
    - name: Build faux docker images
      run: |
        DAQ_TARGETS=faux1,faux2 cmd/build tar /tmp/build_artifacts/docker_images/
        docker image ls
        mkdir -p /tmp/build_artifacts
        cp .build_built /tmp/build_artifacts/
        cp .build_hash /tmp/build_artifacts/
    - uses: actions/upload-artifact@v2
      with:
          name: build_artifacts_faux
          path: /tmp/build_artifacts/

  build_docker_setup:
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Installing dependencies
      env:
        GIT_URL: ${{ secrets.GIT_URL }}
      run: |
        bin/setup_daq
    - name: Build setup based docker images
      run: |
        DAQ_TARGETS=aardvark,aardvark2,default,networking,switch cmd/build tar /tmp/build_artifacts/docker_images/
        docker image ls
        mkdir -p /tmp/build_artifacts
        cp .build_built /tmp/build_artifacts/
        cp .build_hash /tmp/build_artifacts/
    - uses: actions/upload-artifact@v2
      with:
          name: build_artifacts_setup
          path: /tmp/build_artifacts/

  build_docker_test:
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Installing dependencies
      env:
        GIT_URL: ${{ secrets.GIT_URL }}
      run: |
        bin/setup_daq
    - name: Build docker images for tests
      run: |
        DAQ_TARGETS=test_bacnet,test_hold,test_mudgee,test_brute,test_discover,usi,test_ipaddr cmd/build tar /tmp/build_artifacts/docker_images/
        docker image ls
        mkdir -p /tmp/build_artifacts
        cp .build_built /tmp/build_artifacts/
        cp .build_hash /tmp/build_artifacts/
    - uses: actions/upload-artifact@v2
      with:
          name: build_artifacts_test
          path: /tmp/build_artifacts/

  integration_tests:
    needs: [build_docker_faucet, build_docker_faux, build_docker_setup, build_docker_test]
    runs-on: ubuntu-18.04
    strategy:
      fail-fast: false
      matrix:
        test: [base, many, aux, topo, modules, dhcp, switch, mud]
    steps:
    - uses: actions/download-artifact@v2
      with:
          name: build_artifacts_faucet
          path: /tmp/build_artifacts_faucet
    - uses: actions/download-artifact@v2
      with:
          name: build_artifacts_faux
          path: /tmp/build_artifacts_faux
    - uses: actions/download-artifact@v2
      with:
          name: build_artifacts_setup
          path: /tmp/build_artifacts_setup
    - uses: actions/download-artifact@v2
      with:
          name: build_artifacts_test
          path: /tmp/build_artifacts_test
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: Set up JDK 1.11
      uses: actions/setup-java@v1
      with:
        java-version: 1.11
    - name: Installing dependencies
      env:
        GIT_URL: ${{ secrets.GIT_URL }}
      run: |
        bin/setup_daq
    - name: Loading docker images
      run: |
        touch .build_built
        cat /tmp/build_artifacts_faucet/.build_built >> .build_built
        ls -a
        cd /tmp/build_artifacts_faucet/docker_images
        for file in *; do docker load < "$file"; done
        rm -rf /tmp/build_artifacts_faucet
        cd -
        cat /tmp/build_artifacts_faux/.build_built >> .build_built
        ls -a
        cd /tmp/build_artifacts_faux/docker_images
        for file in *; do docker load < "$file"; done
        rm -rf /tmp/build_artifacts_faux
        cd -
        cat /tmp/build_artifacts_setup/.build_built >> .build_built
        ls -a
        cd /tmp/build_artifacts_setup/docker_images
        for file in *; do docker load < "$file"; done
        rm -rf /tmp/build_artifacts_setup
        cd -
        cat /tmp/build_artifacts_test/.build_built >> .build_built
        ls -a
        cd /tmp/build_artifacts_test/docker_images
        for file in *; do docker load < "$file"; done
        rm -rf /tmp/build_artifacts_test
        cd -
        bin/build_hash write
    - name: Running ${{ matrix.test }} test
      env:
        DOCKER_STARTUP_TIMEOUT_MS: 60000
        GCP_BASE64_CRED: ${{ secrets.GCP_BASE64_CRED }}
        GCP_REFLECT_KEY_BASE64: ${{ secrets.GCP_REFLECT_KEY_BASE64 }}
      run: |
        bin/test_daq ${{ matrix.test }}
    - name: Generated test report
      if: ${{ always() }}
      run: |
        echo '************* Use sed to filter out timestamp prefix *************'
        echo 'Download log archive, find the right job, and use:'
        echo "  sed -e 's/^[-:.0-9TZ]\+ //' 7_Generated\ test\ report.txt"
        cat inst/test_${{ matrix.test }}.out

  unit_tests:
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: Install dependencies
      env:
        GIT_URL: ${{ secrets.GIT_URL }}
      run: |
        bin/setup_dev
    - name: Check style
      run: |
        bin/check_style
    - name: Unit test
      run: |
        testing/run_unit_tests.sh

  usi_tests:
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 1.11
      uses: actions/setup-java@v1
      with:
        java-version: 1.11
    - name: Build with Maven
      run: mvn -B clean compile test assembly:single --file usi/pom.xml
