# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: DAQ test suite

on:
  push:
  pull_request:
  schedule:
    - cron: '0 16 * * *'

jobs:
  build_docker:
    runs-on: ubuntu-18.04
    timeout-minutes: 20
    strategy:
      matrix:
        build: [faucet, faux, setup, base, subset]
    steps:
    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Installing dependencies
      env:
        GIT_URL: ${{ secrets.GIT_URL }}
      run: |
        bin/setup_daq
    - name: Build docker images for tests
      run: |
          bin/build_shard ${{ matrix.build }} compress /tmp/build_artifacts/docker_images/
    - uses: actions/upload-artifact@v2
      with:
          name: build_artifacts_${{ matrix.build  }}
          path: /tmp/build_artifacts/

  integration_tests:
    needs: build_docker
    runs-on: ubuntu-18.04
    timeout-minutes: 40
    strategy:
      fail-fast: false
      matrix:
        test: [base, many, aux, topo, modules, dhcp, switch, mud, ata]
    steps:
    - uses: actions/download-artifact@v2
      with:
          name: build_artifacts_faucet
          path: /tmp/build_artifacts_faucet
    - uses: actions/download-artifact@v2
      with:
          name: build_artifacts_faux
          path: /tmp/build_artifacts_faux
    - uses: actions/download-artifact@v2
      with:
          name: build_artifacts_setup
          path: /tmp/build_artifacts_setup
    - uses: actions/download-artifact@v2
      with:
          name: build_artifacts_base
          path: /tmp/build_artifacts_base
    - uses: actions/download-artifact@v2
      with:
          name: build_artifacts_subset
          path: /tmp/build_artifacts_subset
      if: matrix.test == 'aux'
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: Set up JDK 1.11
      uses: actions/setup-java@v1
      with:
        java-version: 1.11
    - name: Installing dependencies
      env:
        GIT_URL: ${{ secrets.GIT_URL }}
      run: |
        bin/setup_daq
    - name: Loading docker images
      run: |
        bin/load_images faucet faux setup base
    - name: Loading subset docker images
      run: |
        bin/load_images subset
      if: matrix.test == 'aux'
    - name: Running ${{ matrix.test }} test
      env:
        DOCKER_STARTUP_TIMEOUT_MS: 60000
        GCP_BASE64_CRED: ${{ secrets.GCP_BASE64_CRED }}
        GCP_REFLECT_KEY_BASE64: ${{ secrets.GCP_REFLECT_KEY_BASE64 }}
      run: |
        bin/test_daq ${{ matrix.test }}
    - name: Runtime logs
      if: ${{ always() }}
      run: |
        echo %%%%%%% daq log cmdrun.log
        cat inst/cmdrun.log || true

  unit_tests:
    runs-on: ubuntu-18.04
    timeout-minutes: 20
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: Install dependencies
      env:
        GIT_URL: ${{ secrets.GIT_URL }}
      run: |
        bin/setup_dev
    - name: Check style
      run: |
        bin/check_style
    - name: Unit test
      run: |
        testing/run_unit_tests.sh

  shunt_test:
    runs-on: ubuntu-18.04
    timeout-minutes: 20
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: Install dependencies
      env:
        GIT_URL: ${{ secrets.GIT_URL }}
      run: |
        bin/setup_dev
    - name: Shunt test
      run: |
        testing/test_shunt.sh

  usi_tests:
    runs-on: ubuntu-18.04
    timeout-minutes: 20
    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 1.11
      uses: actions/setup-java@v1
      with:
        java-version: 1.11
    - name: Build with Maven
      run: mvn -B clean compile test assembly:single --file usi/pom.xml

  test_fot:
    runs-on: ubuntu-latest
    timeout-minutes: 40
    steps:
      - uses: actions/checkout@v2
      - name: Set up python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: setup forch
        env:
          GIT_URL: ${{ secrets.GIT_URL }}
        run: |
          set -x
          bin/setup_remote forch
          git rev-list HEAD --max-count=1 > forch/etc/DAQ_VERSION
          cd forch
          bin/setup_base
          bin/setup_remote faucet
          bin/setup_remote daq
          bin/retry_cmd bin/build_docker controller
          bin/build_dts
      - name: run fot integration tests
        if: ${{ always() }}
        run: bin/retry_cmd bin/run_fot_test vxlan
      - name: run dts integration tests
        run: bin/retry_cmd bin/run_fot_test dts localhost
      - name: post-run logs
        if: ${{ always() }}
        run: |
          cd forch
          echo %%%%%%%%%%%%% Controller log
          docker logs forch-controller-1
          echo %%%%%%%%%%%%% DAQ log
          cat inst/forch-controller-1/daq/inst/cmdrun.log || cat inst/forch-dts/cmdrun.log
          echo %%%%%%%%%%%%% Forch log
          cat inst/forch-controller-1/forch.log
          echo %%%%%%%%%%%%% Faucet log
          cat inst/forch-controller-1/faucet.log
          echo %%%%%%%%%%%%% Endpoint log
          cat inst/endpoint.log || true
          echo %%%%%%%%%%%%% Log lengths
          find inst -name \*.log | fgrep -v nodes/ | xargs wc -l
