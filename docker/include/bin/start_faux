#!/bin/bash

echo Starting faux device at `date` with $*

declare -A options
for option in $*; do
    if [[ $option == *"="* ]]; then
        k=$(echo $option | cut -d'=' -f1)
        v=$(echo $option | cut -d'=' -f2)
        options[$k]=$v
    else
        options[$option]=$option
    fi
done

echo Python version `python --version`
echo Java version `java --version`

# Disable docker's built-in resolv mechanism and install standard resolvconf.
# Do this at runtime since it requires permissions that aren't availble at build.
umount /etc/resolv.conf
dpkg -i resolvconf_*.deb

while ! ifconfig -a | fgrep -q BROADCAST; do
    echo Waiting for container interface to exist...
    sleep 1
done

intf_name=$(ip link | fgrep BROADCAST | sed -rn 's/^[0-9]+: ([-a-zA-Z0-9]+).*$/\1/p')
if [ -n "$intf_name" ]; then
    echo Local interface is $intf_name
else
    echo Local interface not found.
    exit 1
fi

set_mac_addr () {
    echo Setting alternate mac $1 on $intf_name
    ip link set addr $1 dev $intf_name
}

set_passwd () {
    echo $1 | chpasswd
}

# Setup change-of-mac address for macoui testing.
if [ -n "${options[macoui]}" ]; then
    set_mac_addr 3c:5a:b4:1e:8f:0a
fi

# test_password faux device setup
if [ -n "${options[passwordpass]}" ]; then
    set_passwd 'root:pass'
    htpasswd -b -c /etc/nginx/.htpasswd admin fail
    /etc/init.d/openbsd-inetd restart
    /usr/sbin/sshd -D &
    service xinetd start
    service ssh start
elif [ -n "${options[passwordfail]}" ]; then
    set_mac_addr 3c:5a:b4:1e:8f:0b
    set_passwd 'root:default'
    echo "pass\npass\n\n\n\n\n\ny\n" | adduser "admin"
    echo "admin:default" | chpasswd
    htpasswd -b -c /etc/nginx/.htpasswd admin default
    /etc/init.d/openbsd-inetd restart
    /usr/sbin/sshd -D &
    service xinetd start
    service ssh start
fi

# security.nmap.http faux device setup
if [ -n "${options[ohttp]}" ]; then
    cp /root/nginx/nginxpass.conf /etc/nginx/nginx.conf
    sed -i 's/listen 80;/listen 12345; listen 54321;/' /etc/nginx/nginx.conf
    service nginx start
fi

# To capture all the data in/out of the faux device for debugging, uncomment
# the following lines. The pcap file will end up in inst/faux/{hostname}.pcap
# on the DAQ controller.
#echo Starting pcap capture...
#tcpdump -nUi $intf_name -w /tmp/`hostname`.pcap &

ip addr show $intf_name

if [ -n "${options[xdhcp]}" ]; then
    echo Assigning static ip address...
    ip link set up dev $intf_name
    # specified ip
    if [ "${options[xdhcp]}" !=  xdhcp ]; then
        ip addr add "${options[xdhcp]}/16" dev $intf_name broadcast 10.20.255.255
    else
        ip addr add 10.20.0.5/16 dev $intf_name broadcast 10.20.255.255
    fi
    ip addr show $intf_name

    if [ -n "${options[opendns]}" ]; then
        dhcp_dns=8.8.8.8
        echo nameserver ${dhcp_dns#DNS=} > /etc/resolv.conf
        route add default gw 10.20.255.254 $intf_name # fixed IP in start_networking
    fi
else
    echo Running dhclient...
    dhclient -v
    ip addr show $intf_name

    # dhclient relies on systemd to update resolv.conf -- but this setup does
    # not use systemd, so get all hacky and update manually.
    function update_dns {
        if [ -n "${options[opendns]}" ]; then
            dhcp_dns=8.8.8.8
        else
            dhcp_dns=$(fgrep DNS= /run/systemd/resolved.conf.d/isc-dhcp-v4-$intf_name.conf)
        fi
        echo nameserver ${dhcp_dns#DNS=} > /tmp/resolv.conf
        if ! diff /tmp/resolv.conf /etc/resolv.conf; then
            echo Updating resolv.conf with $dhcp_dns
            cp /tmp/resolv.conf /etc/resolv.conf
        fi
    }

    # Need to do periodically for when DHCP address changes.
    (while true; do update_dns; sleep 30; done) &
fi

# Pick the one not-lo inet v4 address.
ipline=$(ip addr show | fgrep "inet " | fgrep -v 127.0.0.1)
read -r -a parts <<< "$ipline"
local_ip=${parts[1]%/*}
broadcast_ip=${parts[3]}

echo Faux device at $local_ip bcast $broadcast_ip

# Setup dummy telnet listener to trigger port-scan failure
if [ -n "${options[telnet]}" ]; then
    echo Enabling mock telnet server...
    (while true; do echo Telnet `hostname`; nc -nvlt -p 23 -e `which hostname`; done) &
fi

if [ -n "${options[ssh]}" ]; then
    echo Starting SSH server
    /usr/local/sbin/sshd
elif [ -n "${options[sshv1]}" ]; then
    echo Starting SSHv1 server
    echo 'Protocol 1' >> /usr/local/etc/sshd_config
    /usr/local/sbin/sshd
fi

if [ -n "${options[bacnet]}" ]; then
    echo Starting bacnet loop device.
    java -cp bacnetFaux/build/libs/bacnet-1.0-SNAPSHOT-all.jar \
         FauxDeviceEngine.EntryPoint $local_ip $broadcast_ip "Faux-Device-Pass.json"  &
elif [ -n "${options[bacnetfail]}" ]; then
    echo Starting bacnet loop device.
    java -cp bacnetFaux/build/libs/bacnet-1.0-SNAPSHOT-all.jar \
         FauxDeviceEngine.EntryPoint $local_ip $broadcast_ip "Faux-Device-Fail.json"  &
fi

# NTPv4 query to the NTP server learnt from DHCP.
# NTPv3 query to the IP of time.google.com (since resolv.conf is modified by other tests)
if [ -n "${options[ntpv4]}" ]; then
    dhcp_ntp=$(fgrep NTPSERVERS= /run/ntpdate.dhcp)
    ntp_server=`echo $dhcp_ntp | cut -d "'" -f 2`
    (while true; do
        echo Transmitting NTP query to $ntp_server using NTPv4
        java -jar NTPClient/build/libs/NTPClient-1.0-SNAPSHOT.jar $ntp_server 123 4 > ntp.log
        sleep 8
    done) &
elif [ -n "${options[ntpv3]}" ]; then
    STATIC_NTP_SERVER=216.239.35.8
    (while true; do
        echo Transmitting NTP query to $STATIC_NTP_SERVER using NTPv3
        timeout 5 java -jar NTPClient/build/libs/NTPClient-1.0-SNAPSHOT.jar $STATIC_NTP_SERVER 123 3 > ntp.log
        sleep 8
    done) &
fi

# ntp_pass queries the NTP server learnt from DHCP. ntp_fail sends to time.google.com
if [ -n "${options[ntp_pass]}" -o -n "${options[ntp_fail]}" ]; then
    (while date; do
        if [ -n "${options[ntp_pass]}" ]; then
            dhcp_ntp=$(fgrep NTPSERVERS= /run/ntpdate.dhcp)
            if [ -n "${dhcp_ntp}" ]; then
                ntp_server=`echo $dhcp_ntp | cut -d "'" -f 2`
                echo NTP server from DHCP $ntp_server
            fi
        elif [ -n "${options[ntp_fail]}" ]; then
            ntp_server=time.google.com
        fi
        echo Transmitting NTP query to $ntp_server
        ntpdate -q -p 1 $ntp_server
        sleep 5
     done) &
fi

if [ -n "${options[broadcast_client]}" ]; then
    echo Starting broadcast client.
    port=41794
    cycle_seconds=20
    duration_seconds=360
    python TransportClient/client.py $broadcast_ip $port broadcast $duration_seconds $cycle_seconds &
fi

if [ -n "${options[discover]}" ]; then
    echo Starting bacnet discover loop.
    bin/bacnet_discover loop &
fi

if [ -n "${options[brute]}" ]; then
    echo Starting brute server.
    (python pentests/brute_server.py bad 10000; echo Brute done.) &
elif [ -n "${options[nobrute]}" ]; then
    echo Starting nobrute server.
    (python pentests/brute_server.py good 10000; echo Brute done.) &
fi

# test_tls faux device setup
if [ -n "${options[tls]}" ]; then
    echo Generating tls certs.
    python tlsfaux/generate_certs.py
    echo Starting tls server on port 443 https.
    mv /root/nginx/nginxpass.conf /etc/nginx/nginx.conf
    service nginx start
    python tlsfaux/client.py 1.2 google.com &
    python tlsfaux/client.py 1.3 google.com &
elif [ -n "${options[expiredtls]}" ]; then
    echo Starting expired tls server on port 443 https.
    mv /root/nginx/nginxfail.conf /etc/nginx/nginx.conf
    service nginx start
    python tlsfaux/client.py 1.2 not-a-good-url.google.com &
    python tlsfaux/client.py 1.3 not-a-good-url.google.com &
fi

if [ -n "${options[pubber]}" ]; then
    extraField=`jq .extraField local/pubber.json`
    if [ "$extraField" == null ]; then
        deviceId=`jq -r .deviceId local/pubber.json`
        gateway=`ip route | sed -rn 's/default via (.*) dev.*/\1/p'`
        echo Contacting pagent $gateway for new device key for $deviceId
        curl http://$gateway:8192?device=$deviceId > pagent.json || echo pagent error
        echo pagent reply:
        cat pagent.json
        jq -r '."rsa_private.pem"' pagent.json > local/rsa_private.pem
        openssl pkcs8 -topk8 -inform PEM -outform DER -in local/rsa_private.pem -nocrypt > local/rsa_private.pkcs8
        echo Updated pubber private key from pagent for device $deviceId
        ls -l local/rsa_*
    fi
    echo Running cloud pubber tool...
    (while date; do
         pubber/bin/run local/pubber.json
         # Do https query in case pubber is not configured, for testing port 443
         curl -o /dev/null https://google.com
         sleep 30
     done) &
fi

# Periodically sends ARP packets
if [ -z "${options[xarp]}" ]; then
    echo Starting arp send loop.
    (while true; do arpsend -D -e 10.20.254.254 $intf_name; sleep 2; done) &
fi

if [ -n "${options[curl]}" ]; then
    echo Starting curl loop.
    (while true; do curl -o - http://google.com; sleep 1; done) &
fi

conf_file=/config/start/start_faux.sh
if [ -f $conf_file ]; then
    echo Loading $conf_file...
    source $conf_file
else
    echo Runtime config $conf_file not found.
fi

echo Blocking for all eternity.
tail -f /dev/null
