#!/bin/bash -e
source reporting.sh

RESULT_LINES=/tmp/result_lines.txt
MONO_LOG=/tmp/mono-log.txt
MANIFEST=./module_manifest.json
REPORT_FILE=/tmp/report.txt
MODULE_CONFIG=/config/device/module_config.json
status=pass

echo Baseline ping test report | tee -a $MONO_LOG
# This is a check that the startup.pcap file exists and is proper.
tcpdump -en -r /scans/startup.pcap ip

echo %% $(tcpdump -n -r /scans/startup.pcap | wc -l) packets captured. | tee -a $MONO_LOG
echo

STATIC_IP=`jq -r .static_ip /config/device/module_config.json`
if [ "$STATIC_IP" == null ]; then
    STATIC_IP=
fi

if [ -n "$STATIC_IP" ]; then
    echo RESULT skip base.startup.dhcp Using static ip $STATIC_IP | tee -a $RESULT_LINES
else
    req=pass
    ack=pass
    echo
    tcpdump -ven -r /scans/startup.pcap port 67 | fgrep "length 1: Request" || req=fail
    tcpdump -ven -r /scans/startup.pcap port 67 | fgrep "length 1: ACK" || ack=fail1
    if [ $req = "fail" ] || [ $ack = "fail" ]; then
        status=fail
        echo RESULT fail base.startup.dhcp missing dhcp packets| tee -a $RESULT_LINES
    else
        echo RESULT pass base.startup.dhcp | tee -a $RESULT_LINES
    fi
fi

# Setup for accessing control plane switch. If LOCAL_IP is defined, which
# is the intended local address for this node on the control plane then
# SWITCH_IP will be the IP address of the OpenFlow switch.
if [ -n "$LOCAL_IP" ]; then
    echo Configuring network with local address $LOCAL_IP | tee -a $MONO_LOG

    SWITCH_IP=`jq -r .run_info.switch.ip $MODULE_CONFIG`
    LOCAL_ONLY=${LOCAL_IP%/*}
    LOCAL_INDEX=${LOCAL_ONLY##*.}
    echo Using IP index $LOCAL_INDEX
    LOCAL_MAC=ca:50:20:b1:4f:$(printf %02x $LOCAL_INDEX)
    echo Using local MAC address $LOCAL_MAC

    LOCAL_IFACE=`hostname`-eth0
    ip link set dev $LOCAL_IFACE addr $LOCAL_MAC
    ip addr add $LOCAL_IP dev $LOCAL_IFACE

    ping -n -c 2 $SWITCH_IP || true

    # Delete any local arp entry, to force a re-arp
    arp -d $SWITCH_IP || true

    echo Switch test with target $SWITCH_IP:$TARGET_PORT | tee -a $MONO_LOG
    local_status=pass
    ping -n -c 10 $SWITCH_IP || local_status=fail
    echo RESULT $local_status base.switch.ping target %% $SWITCH_IP:$TARGET_PORT | tee -a $RESULT_LINES
    if [ $local_status != pass ]; then
        status=fail
    fi
else
    echo LOCAL_IP not configured, assuming no network switch | tee -a $MONO_LOG
    echo RESULT skip base.switch.ping No local IP has been set, check system config | tee -a $RESULT_LINES
fi

# First ping might fail b/c of warm-up delays.
summary=""
local_status=pass
ping -n -c 10 $TARGET_IP || (local_status=fail && status=fail)

if [ $local_status == pass ]; then
    summary="target reached"
else
    summary="could not reach target"
fi

echo RESULT $local_status base.target.ping $summary %% $TARGET_IP | tee -a $RESULT_LINES

echo | tee -a $MONO_LOG
echo Done with basic connectivity tests | tee -a $MONO_LOG

echo Checking startup NTP
ntp_target=${TARGET_IP%.*}.2
ntp_request=`tcpdump -env -c 1 -r /scans/startup.pcap dst port 123 | wc -l`
ntp_proper=`tcpdump -env -c 1 -r /scans/startup.pcap dst port 123 and dst host $ntp_target | wc -l`
if [ "$ntp_request" == 0 ]; then
    ntp_result=skip
    ntp_summary="No NTP traffic detected"
elif [ "$ntp_proper" == 0 ]; then
    ntp_result=fail
    ntp_summary="Invalid NTP server address"
else
    ntp_result=pass
    ntp_summary="Correct NTP server address"
fi
echo RESULT $ntp_result base.startup.ntp $ntp_summary %% NTP server $ntp_target | tee -a $RESULT_LINES

echo Checking startup DNS activity...
dns_target=${TARGET_IP%.*}.2
dns_request=`tcpdump -env -c 1 -r /scans/startup.pcap dst port 53 | wc -l`
dns_proper=`tcpdump -env -c 1 -r /scans/startup.pcap dst port 53 and dst host $dns_target | wc -l`
if [ "$dns_request" == 0 ]; then
    dns_result=skip
    dns_summary="No dns traffic detected"
elif [ "$dns_proper" == 0 ]; then
    dns_result=fail
    dns_summary="Invalid DNS server address"
else
    dns_result=pass
    dns_summary="Correct DNS server address"
fi
echo RESULT $dns_result base.startup.dns $dns_summary %% DNS server $dns_target | tee -a $RESULT_LINES


write_out_monolog $REPORT_FILE \
                  $MANIFEST \
                  $MONO_LOG \
                  $RESULT_LINES


ping_runtime=/config/port/ping_runtime.sh
if [ -f $ping_runtime ]; then
    echo Executing $ping_runtime
    source $ping_runtime
else
    echo $ping_runtime not found.
fi

echo Critical module status is $status
[ "$status" == pass ]
