#!/bin/bash -e

ROOT=$(realpath $(dirname $0)/../..)
GOLDEN_FILE=$ROOT/device_coupler/testing/test_device_coupler.out
DAQ_CONFIG=$ROOT/device_coupler/config/daq_config.yaml
TEST_RESULTS=$ROOT/inst/device_coupler/test_device_coupler.out
exit_code=0


trunk_port=trunk0
devices=3

$ROOT/bin/net_clean

faux_args=("" "brute broadcast_client ntpv4 wpa" "nobrute expiredtls bacnetfail pubber passwordfail opendns ntpv3 ssh curl wpawrong" "tls macoui passwordpass bacnet pubber broadcast_client ssh curl")

# Create test results file
mkdir -p $(dirname $TEST_RESULTS) && touch $TEST_RESULTS

# Setup an instance test site
rm -rf inst/test_site && mkdir -p inst/test_site
cp -a resources/test_site inst/

echo %%%%%%%%%%%%%%%%%%%%%%%%% Preparing aux test run
mkdir -p local/site
cp -r resources/test_site/device_types/rocket local/site/device_types/
mkdir -p local/site/device_types/rocket/aux/
cp subset/bacnet/bacnetTests/src/main/resources/pics.csv local/site/device_types/rocket/aux/
cp -r resources/test_site/mac_addrs local/site/
# Create config for the password test to select which dictionaries to use.
cat <<EOF > local/base_config.json
{
  "include": "../resources/setups/baseline/base_config.json",
  "modules": {
    "password": {
      "dictionary_dir": "resources/faux"
    }
  }
}
EOF

cp $DAQ_CONFIG $ROOT/local/system.yaml

echo Build all container images...
cmd/build missing

# Create faux devices
echo "Creating faux devices"
for i in $(seq 1 $devices); do
  $ROOT/cmd/faux $i "${faux_args[$i]}"
  sudo ip link set faux-$i up
done

# Create OVS bridge to simulate access switch
PYTHONPATH=PYTHONPATH:$ROOT python3 device_coupler/simulate_access_switch.py --bridge br0 --devices $devices --trunk-iface $trunk_port

# Start DAQ
$ROOT/device_coupler/start_daq -s

mkdir -p $ROOT/inst/device_coupler

faux1_mac=$(docker exec daq-faux-1 ip addr show faux-eth0  | grep ether | cut -d " " -f6)
faux1_mac_clean=$(echo $faux1_mac | sed -e 's/://g')
faux2_mac=$(docker exec daq-faux-2 ip addr show faux-eth0  | grep ether | cut -d " " -f6)
faux2_mac_clean=$(echo $faux2_mac | sed -e 's/://g')
faux3_mac=$(docker exec daq-faux-3 ip addr show faux-eth0  | grep ether | cut -d " " -f6)
faux3_mac_clean=$(echo $faux3_mac | sed -e 's/://g')

echo $faux1_mac > $TEST_RESULTS
echo ================= >> $TEST_RESULTS
fgrep 'RESULT' $ROOT/inst/run-$faux1_mac_clean/report_$faux1_mac_clean*.md | awk '{print $1, $2, $3}' >> $TEST_RESULTS

echo $faux2_mac >> $TEST_RESULTS
echo ================= >> $TEST_RESULTS
fgrep 'RESULT' $ROOT/inst/run-$faux2_mac_clean/report_$faux2_mac_clean*.md | awk '{print $1, $2, $3}' >> $TEST_RESULTS

echo $faux3_mac >> $TEST_RESULTS
echo ================= >> $TEST_RESULTS
fgrep 'RESULT' $ROOT/inst/run-$faux3_mac_clean/report_$faux3_mac_clean*.md | awk '{print $1, $2, $3}' >> $TEST_RESULTS

if ! diff $GOLDEN_FILE $TEST_RESULTS; then
  exit_code=1
fi

# Cleanup
$ROOT/bin/net_clean

echo Finished test_device_coupler
exit $exit_code
