#!/bin/bash -e

ROOT=$(realpath $(dirname $0)/../..)
GOLDEN_FILE=$ROOT/device_coupler/testing/test_device_coupler.out
TEST_RESULTS=$ROOT/inst/device_coupler/test_device_coupler.out
exit_code=0


trunk_port=trunk0
devices=3

$ROOT/bin/net_clean

# Create faux devices
echo "Creating faux devices"
for i in $(seq 1 $devices); do
  $ROOT/cmd/faux $i
  sudo ip link set faux-$i up
done

# Create OVS bridge to simulate access switch
PYTHONPATH=PYTHONPATH:$ROOT python3 device_coupler/simulate_access_switch.py --bridge br0 --devices $devices --trunk-iface $trunk_port

# Start DAQ
$ROOT/device_coupler/start_daq -s &
daq_pid=$!
sleep 30

# Setup device coupler
$ROOT/bin/setup_device_coupler -t $trunk_port

wait $daq_pid

mkdir -p $ROOT/inst/device_coupler

echo 9a:02:57:1e:8f:01 > $TEST_RESULTS
echo ================= >> $TEST_RESULTS
fgrep 'RESULT' $ROOT/inst/run-9a02571e8f01/report_9a02571e8f01*.md | awk '{print $1, $2, $3}' >> $TEST_RESULTS

echo 9a:02:57:1e:8f:02 >> $TEST_RESULTS
echo ================= >> $TEST_RESULTS
fgrep 'RESULT' $ROOT/inst/run-9a02571e8f02/report_9a02571e8f02*.md | awk '{print $1, $2, $3}' >> $TEST_RESULTS

echo 9a:02:57:1e:8f:03 >> $TEST_RESULTS
echo ================= >> $TEST_RESULTS
fgrep 'RESULT' $ROOT/inst/run-9a02571e8f03/report_9a02571e8f03*.md | awk '{print $1, $2, $3}' >> $TEST_RESULTS

if ! diff $GOLDEN_FILE $TEST_RESULTS; then
  exit_code=1
fi

# Cleanup
$ROOT/bin/net_clean

echo Finished test_device_coupler
exit $exit_code
